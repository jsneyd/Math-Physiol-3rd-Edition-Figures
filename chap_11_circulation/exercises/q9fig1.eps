%!PS-Adobe-3.1 EPSF-3.0%%Title: q9fig1.eps%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 9.0%AI9_PrintingDataBegin%%For: sir James the Wise%%CreationDate: 10/28/01%%CropBox: 0.000000 0.000000 472.000000 424.437988%%BoundingBox: 0 0 472 425 %%HiResBoundingBox: 0.000000 0.000000 472.000000 424.437988%%LanguageLevel: 2 %%DocumentData: Clean7Bit%%Pages: 1 %%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0%%+ procset Adobe_AGM_Core 2.0 0%%DocumentFonts: %%DocumentSuppliedFonts: %%PageOrder: Ascend%%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %%EndComments%%BeginDefaults%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 233 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_dst64 64 string def/AGMCORE_srcLen nd/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_imagestring0 nd/AGMCORE_imagestring1 nd/AGMCORE_imagestring2 nd/AGMCORE_imagestring3 nd/AGMCORE_imagestring4 nd/AGMCORE_imagestring5 nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_mbuf () def/AGMCORE_ybuf () def/AGMCORE_kbuf () def/AGMCORE_gbuf () def/AGMCORE_bbuf () def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_arg1 nd/AGMCORE_arg2 nd/AGMCORE_&setgray nd/AGMCORE_&image nd/AGMCORE_&colorimage nd/AGMCORE_&imagemask nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&&setcolorspace nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_in_rip_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ccimage_exists nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_ndx nd/AGMCORE_err_strings nd/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/bdf{	bind def} bind def/xdf{	exch def} def/ldf {	load def} def/ddf{	put} def	/xddf{	3 -1 roll put} def	/xpt{	exch put} def	/bdict	{		mark	} def		/edict	{		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end	}def	/ps_level	/languagelevel where{		pop languagelevel	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/ndf{	1 index where{		pop pop pop	}{		dup xcheck		{bind}if		def	}ifelse} def/skip_image{	has_color ne{		dup 256 idiv		{currentfile AGMCORE_str256 readstring pop pop}repeat		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval		readstring pop pop	}{		pop	}ifelse} def/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx} def/colorbuf{	0 1 2 index length 1 sub		{		dup 2 index exch get 		255 exch sub 		2 index 		3 1 roll 		put		} for} def/makereadonlyarray{	/packedarray where		{pop packedarray}		{array astore readonly}	ifelse} def/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq 	{		dup /HalftoneType get 1 eq			{			/SpotFunction get			}			{			dup /HalftoneType get 2 eq				{				/GraySpotFunction get				}				{				pop				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}				{dup mul exch dup mul add 1 exch sub}ifelse}bind				}			ifelse			}		ifelse	}	if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	userdict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				/AGMCORE_arg2 xdf	/AGMCORE_arg1 xdf		clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			dup (.) ne AGMCORE_arg1 0 lt and				{				pop				}				{				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt					{					currentpoint AGMCORE_deltaY sub exch pop					clippath pathbbox pop pop pop 44 add exch moveto					} if				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show				} ifelse						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{			dup 94 eq 				{				pop				AGMCORE_arg1 0 ge					{					AGMCORE_arg1 AGMCORE_str256 cvs					dup /AGMCORE_tmp exch length def					AGMCORE_str256 exch 0 exch putinterval					AGMCORE_str256 0 AGMCORE_tmp getinterval					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt						{						currentpoint AGMCORE_deltaY sub exch pop						clippath pathbbox pop pop pop 44 add exch moveto						} if					AGMCORE_str256 0 AGMCORE_tmp getinterval show					}					{					/AGMCORE_arg1 0 def					} ifelse				0 1 AGMCORE_str256 length 1 sub					{					AGMCORE_str256 exch 0 put					}for				/AGMCORE_tmp 0 def				AGMCORE_arg1 0 ne					{					/AGMCORE_arg1 AGMCORE_arg2 def					} if				}				{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def				}ifelse			} ifelse		} forall} bdflevel2{	/AGMCORE_map_reserved_ink_name	{		dup type /stringtype eq{			dup /Red eq{				pop (_Red_)			}{				dup /Green eq{					pop (_Green_)				}{					dup /Blue eq{						pop (_Blue_)					}{						dup /Cyan eq{							pop (_Cyan_)						}{							dup /Magenta eq{								pop (_Magenta_)							}{								dup /Yellow eq{									pop (_Yellow_)								}{									dup /Black eq{										pop (_Black_)									}{										dup / eq{											pop (Process)										}if									}ifelse								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}if	}def}if/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not		{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror			{			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and {				$error /newerror false put				AGMCORE_cur_err /AGMCORE_bad_environ eq					{					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version					}					{					AGMCORE_cur_err 0 0					} ifelse				compose_error_msg				} if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def		/AGMCORE_&&setcolorspace /setcolorspace ldf	}if	/AGMCORE_&image systemdict/image get def	/AGMCORE_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMCORE_&colorimage /colorimage ldf	}if	/AGMCORE_in_rip_sep		level2{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_gstate_known{		where{			/Adobe_AGM_Core_Id known		}{			false		}ifelse	}ndf	/AGMCORE_GSTATE AGMCORE_gstate_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 7 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	end}def/page_setup{	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or		}ifelse	def		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots	}ifelse	{		/setcmykcolor[			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx			/setcmykcolor load dup type/operatortype ne{/exec cvx}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/ln /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		/invert_image_samples		{			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def		/get_gstate		{			AGMCORE_GSTATE begin			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def			/AGMCORE_GSTATE_clr_spc currentcolorspace def			/AGMCORE_GSTATE_clr_indx 0 def			/AGMCORE_GSTATE_clr_comps 12 array def			mark currentcolor counttomark				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop			/AGMCORE_GSTATE_fnt rootfont def			/AGMCORE_GSTATE_lw currentlinewidth def			/AGMCORE_GSTATE_lc currentlinecap def			/AGMCORE_GSTATE_lj currentlinejoin def			/AGMCORE_GSTATE_ml currentmiterlimit def			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf			/AGMCORE_GSTATE_sa currentstrokeadjust def						/AGMCORE_GSTATE_clr_rnd currentcolorrendering def			/AGMCORE_GSTATE_op currentoverprint def			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def			currentcolortransfer 				cvlit /AGMCORE_GSTATE_gy_xfer xdf 				cvlit /AGMCORE_GSTATE_b_xfer xdf				cvlit /AGMCORE_GSTATE_g_xfer xdf 				cvlit /AGMCORE_GSTATE_r_xfer xdf			/AGMCORE_GSTATE_ht currenthalftone def			/AGMCORE_GSTATE_flt currentflat def			end		}ndf				/set_gstate		{			AGMCORE_GSTATE begin			AGMCORE_GSTATE_ctm setmatrix			AGMCORE_GSTATE_clr_spc setcolorspace			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor			AGMCORE_GSTATE_fnt setfont			AGMCORE_GSTATE_lw setlinewidth			AGMCORE_GSTATE_lc setlinecap			AGMCORE_GSTATE_lj setlinejoin			AGMCORE_GSTATE_ml setmiterlimit			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash			AGMCORE_GSTATE_sa setstrokeadjust						AGMCORE_GSTATE_clr_rnd setcolorrendering			AGMCORE_GSTATE_op setoverprint			AGMCORE_GSTATE_bg cvx setblackgeneration			AGMCORE_GSTATE_ucr cvx setundercolorremoval			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or				{				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne					{					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark					} if				}{				AGMCORE_GSTATE_ht sethalftone				} ifelse			AGMCORE_GSTATE_flt setflat			end		}ndf		AGMCORE_producing_seps not{				/setcolorspace where{				/Adobe_AGM_Core_Id known not			}{				true			}ifelse			{				/setcolorspace				{					dup type dup /arraytype eq exch /packedarraytype eq or{						dup 0 get dup /Separation eq{							pop							[ exch {} forall ]							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put						}{							/DeviceN eq {								[ exch {} forall ]								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put							}if						}ifelse					}if					AGMCORE_&&setcolorspace 				}def			}if		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/ln{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/op /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/Adobe_AGM_Core 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	Adobe_AGM_Core/AGMCORE_name xddf	false	currentpagedevice/SeparationColorNames get{		AGMCORE_name eq or	}forall}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	1 setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMCORE_&imagemask			}{				AGMCORE_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMCORE_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMCORE_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/rdline {	currentfile AGMCORE_str256 readline pop} def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMCORE_src256 readstring pop		dup length /AGMCORE_srcLen exch def		/AGMCORE_ndx 0 def				AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{			1 index exch get			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put			/AGMCORE_ndx AGMCORE_ndx 1 add def		}for		pop		AGMCORE_dst64 0 AGMCORE_ndx getinterval	}	bind	/exec cvx	] cvx} def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{	 						currentoverprint not{			 					1 AGMCORE_&setgray	 							knockout_image_samples			 					currentdict imageormask_sys			 				}{			 					nulldevice currentdict imageormask_sys			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										nulldevice									}{										invert_image_samples									}ifelse								}{		 							currentoverprint not{		 								knockout_image_samples				 					}{				 						nulldevice				 					}ifelse					 			}ifelse						 		1 AGMCORE_&setgray								currentdict imageormask_sys							}{																	currentcolortransfer								{pop 1} exch addprocs 4 1 roll												{pop 1} exch addprocs 4 1 roll								{pop 1} exch addprocs 4 1 roll								{pop 1} exch addprocs 4 1 roll								setcolortransfer																	MultipleDataSources NComponents AGMCORE_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{		 								currentoverprint not{		 									knockout_image_samples				 						}{				 							nulldevice				 						}ifelse					 				}if								}ifelse						 		1 AGMCORE_&setgray								currentdict imageormask_sys							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/tint_image_to_color{	begin		Width Height BitsPerComponent ImageMatrix 		/DataSource load	end	Adobe_AGM_Core begin		/AGMCORE_mbuf 0 string def		/AGMCORE_ybuf 0 string def		/AGMCORE_kbuf 0 string def		{			colorbuf dup length AGMCORE_mbuf length ne				{				dup length dup dup				/AGMCORE_mbuf exch string def				/AGMCORE_ybuf exch string def				/AGMCORE_kbuf exch string def				} if			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop		}		addprocs		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage		end} def			/sep_imageormask_lev1{	begin		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{						{				255 mul round cvi GrayLookup exch get			} currenttransfer addprocs settransfer			currentdict imageormask		}{			/sep_colorspace_dict AGMCORE_gget/Components known{				MappedCSA 0 get /DeviceCMYK eq{					Components aload pop				}{					0 0 0 Components aload pop 1 exch sub				}ifelse								Adobe_AGM_Core/AGMCORE_k xddf 				Adobe_AGM_Core/AGMCORE_y xddf 				Adobe_AGM_Core/AGMCORE_m xddf 				Adobe_AGM_Core/AGMCORE_c xddf 									AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer					currentdict imageormask				}{ 										currentcolortransfer					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll					setcolortransfer					currentdict tint_image_to_color				}ifelse			}{								MappedCSA 0 get /DeviceGray eq {					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer					currentdict imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						currentdict tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll						setcolortransfer 						currentdict tint_image_to_color					}ifelse				}ifelse			}ifelse		}ifelse	end}def/sep_image_lev1_sep{	begin		/sep_colorspace_dict AGMCORE_gget/Components known{			Components aload pop						Adobe_AGM_Core/AGMCORE_k xddf 			Adobe_AGM_Core/AGMCORE_y xddf 			Adobe_AGM_Core/AGMCORE_m xddf 			Adobe_AGM_Core/AGMCORE_c xddf 							{AGMCORE_c mul 1 exch sub}			{AGMCORE_m mul 1 exch sub}			{AGMCORE_y mul 1 exch sub}			{AGMCORE_k mul 1 exch sub}		}{ 			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}		}ifelse				AGMCORE_get_ink_data currenttransfer addprocs settransfer				currentdict imageormask_sys				end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMCORE_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or{ 								knockout_image_samples		 					}{		 						nulldevice 		 					}ifelse							currentdict imageormask_sys 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/read_image_file{	AGMCORE_imagefile 0 setfileposition	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put	exch	load exec}def/write_image_file{	{ (AGMCORE_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Core/AGMCORE_imagefile xddf 		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMCORE_imbuf readstring pop			}{				exec			} ifelse			AGMCORE_imagefile exch writestring		}for		true	}ifelse}def/imageormask_l2_overprint{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile	}{		currentdict imageormask	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				nulldevice currentdict imageormask_sys		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_imageormask_lev1{	/indexed_colorspace_dict AGMCORE_gget begin	begin		currentdict		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{						{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer			imageormask		}{						MappedCSA 0 get /DeviceGray eq {				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceCMYK eq {					currentcolortransfer					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll					setcolortransfer 					tint_image_to_color				}{ 					currentcolortransfer					{pop 1} exch addprocs 4 1 roll					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll					setcolortransfer 					tint_image_to_color				}ifelse			}ifelse		}ifelse	end end}def/indexed_image_lev1_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}				AGMCORE_get_ink_data currenttransfer addprocs settransfer				currentdict imageormask_sys				end end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMCORE_&imagemask		}{			AGMCORE_&image		}ifelse				end end}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false op [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/MultipleDataSources false def			/NComponents 1 def			/ImageType 1 def			/Decode [0 1 def]			/SkipImageProc {false} def			currentdict		end	}if	dup begin		/HostSepColorImage false def		currentdict/Decode known not{			/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse			] 			def		}if		currentdict/Operator known not{			/Operator /image def		}if	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/cpaint_gcomp{	AGM_preserve_spots{		gsave		nulldevice	}if}def/cpaint_gsep{	AGM_preserve_spots{		grestore		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 	}{			gsave		nulldevice	}ifelse}def/cpaint_gend{	AGM_preserve_spots{		Adobe_AGM_Core/AGMCORE_ovp get setoverprint	}{		grestore	}ifelse	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 1.1 0%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 1.1 0userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def}if currentpacking truesetpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefontldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshowldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dupsystemdict begin userdict begin/globaldict where{/globaldict get begin}if dupwhere pop exch get/globaldict where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfontdup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exchdef currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def endfindfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobalnull copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}if/$sname null def/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 indexfindfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astoreConcatStrings exch findfont currentglobal exch dup gcheck setglobal nullcopyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobalexch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst getexec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bindput}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}forpop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfontbegin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{Adobe_CoolType_Data/WidthShowArray get}bind def/?set{3 index findfont dup/FontName known{dup/FontName get/Courier eq{4 index/Courier eq}{true}ifelseexch/DistillerFauxFont known not and}{pop pop false}ifelse{exch pop exch popexch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch findfont2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfontdefinefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 indextype/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index findfont/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded get 1 dictbegin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3 indexputinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval ?str1 02 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded putend copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{popexch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 indexexch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind defsetpacking end/currentdistillerparams where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not1 dict begin/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop/Courier}bind}ifelse def userdict begin/$SubstituteFont 20 dict dup begin/$used false def end def end{countdictstack array dictstack 0 get beginuserdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128 stringdef/$slen 0 def/$sname null def/$match false def/$fontname null def/$usedfalse def/$fontname null def/$italicangle 26.5 def/$findfontByEnum{dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def mark{$fontpat 0 $slen 7 add getinterval{/$matchexch def exit}$str filenameforall}stopped cleartomark/$slen 0 def $match falsene{$match(fonts/)anchorsearch pop pop cvn/$used true def}{/Courier}ifelse}binddef/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def end def end def/$cmapname null def/$buildfontname{length $str 1 index(-)putinterval 1 add$str 1 index $cmapname $fontpat cvs putinterval $cmapname length add $str exch0 exch getinterval cvn/$used true def}bind def/$findfontByROS{/$fontname exchdef $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1 index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelseexch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$strcvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnlyknown{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get dup/Registryget Registry eq exch/Ordering get Ordering eq and and{exch restore exch poptrue exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end currentdict/$errorknown currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Categoryresourcestatus{pop pop{$SubstituteFont begin dup length $slen gt $sname nullne or $slen 0 gt and{$sname null eq{dup $str cvs dup length $slen sub $slengetinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapnameexch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS}{pop$findfontByEnum}ifelse}{//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin dup length $slen gt $sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{/findfont{$SubstituteFont begin dup systemfindfont $slen 0 gt $sname null ne 3index length $slen gt or and{dup/FontName get dup/Courier eq exch 3 index neand{pop $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall $fontname currentdict end definefont}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end}if end%%EndResource%%EndProlog%%BeginSetupAdobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at leastPostScript Level ^\tand at least PostScript version ^. Ensure that the PPD is correct or thatthe PostScript  level requested is supported by this printer. ) def/AGMCORE_color_space_onhost_seps (This job has content that will not separatewith on-host methods. ) def/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend put2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get exec%%EndSetup%%Page: name:1 1%%EndPageComments%%BeginPageSetupAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddfmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez1 -1 scale 0 -424.438 translategsave[1 0 0 1 0 0 ] concatgsave0 0 mo0 424.438 ln472 424.438 ln472 0 lnclp1 lw0 lc0 lj4 ml[] 0 dshtrue sadj25.5 208.944 mo446.167 208.944 lnfalse op0 0 0 1 cmyks416.417 209.604 mo416.417 225.805 387.017 238.938 350.75 238.938 cv314.483 238.938 285.083 225.805 285.083 209.604 cv285.083 193.404 314.483 180.271 350.75 180.271 cv387.017 180.271 416.417 193.404 416.417 209.604 cv0 0 0 0 cmykf416.417 209.604 mo416.417 225.805 387.017 238.938 350.75 238.938 cv314.483 238.938 285.083 225.805 285.083 209.604 cv285.083 193.404 314.483 180.271 350.75 180.271 cv387.017 180.271 416.417 193.404 416.417 209.604 cvcp0 0 0 1 cmyks186.417 209.272 mo186.417 225.472 157.017 238.605 120.75 238.605 cv84.4834 238.605 55.0835 225.472 55.0835 209.272 cv55.0835 193.072 84.4834 179.938 120.75 179.938 cv157.017 179.938 186.417 193.072 186.417 209.272 cv0 0 0 0 cmykf186.417 209.272 mo186.417 225.472 157.017 238.605 120.75 238.605 cv84.4834 238.605 55.0835 225.472 55.0835 209.272 cv55.0835 193.072 84.4834 179.938 120.75 179.938 cv157.017 179.938 186.417 193.072 186.417 209.272 cvcp0 0 0 1 cmyks446.5 355.938 mo446.5 362.565 441.127 367.938 434.5 367.938 cv37.5 367.938 ln30.8726 367.938 25.5 362.565 25.5 355.938 cv25.5 51.938 ln25.5 45.3105 30.8726 39.938 37.5 39.938 cv434.5 39.938 ln441.127 39.938 446.5 45.3105 446.5 51.938 cv446.5 355.938 lncps300.559 70.5 mo300.559 77.1274 295.186 82.5 288.559 82.5 cv172.559 82.5 ln165.931 82.5 160.559 77.1274 160.559 70.5 cv160.559 12.5 ln160.559 5.87256 165.931 0.5 172.559 0.5 cv288.559 0.5 ln295.186 0.5 300.559 5.87256 300.559 12.5 cv300.559 70.5 ln0 0 0 0 cmykf300.559 70.5 mo300.559 77.1274 295.186 82.5 288.559 82.5 cv172.559 82.5 ln165.931 82.5 160.559 77.1274 160.559 70.5 cv160.559 12.5 ln160.559 5.87256 165.931 0.5 172.559 0.5 cv288.559 0.5 ln295.186 0.5 300.559 5.87256 300.559 12.5 cv300.559 70.5 lncp0 0 0 1 cmyks186.417 367.938 mo186.417 384.138 157.017 397.271 120.75 397.271 cv84.4834 397.271 55.0835 384.138 55.0835 367.938 cv55.0835 351.738 84.4834 338.604 120.75 338.604 cv157.017 338.604 186.417 351.738 186.417 367.938 cv0 0 0 0 cmykf186.417 367.938 mo186.417 384.138 157.017 397.271 120.75 397.271 cv84.4834 397.271 55.0835 384.138 55.0835 367.938 cv55.0835 351.738 84.4834 338.604 120.75 338.604 cv157.017 338.604 186.417 351.738 186.417 367.938 cvcp0 0 0 1 cmyks416.417 367.938 mo416.417 384.138 387.017 397.271 350.75 397.271 cv314.483 397.271 285.083 384.138 285.083 367.938 cv285.083 351.738 314.483 338.604 350.75 338.604 cv387.017 338.604 416.417 351.738 416.417 367.938 cv0 0 0 0 cmykf416.417 367.938 mo416.417 384.138 387.017 397.271 350.75 397.271 cv314.483 397.271 285.083 384.138 285.083 367.938 cv285.083 351.738 314.483 338.604 350.75 338.604 cv387.017 338.604 416.417 351.738 416.417 367.938 cvcp0 0 0 1 cmykssave_ctmrestore_ctm[6 6 ] 0 dsh471.5 411.938 mo471.5 418.565 466.127 423.938 459.5 423.938 cv12.5 423.938 ln5.87256 423.938 0.5 418.565 0.5 411.938 cv0.5 322.938 ln0.5 316.311 5.87256 310.938 12.5 310.938 cv459.5 310.938 ln466.127 310.938 471.5 316.311 471.5 322.938 cv471.5 411.938 lncpssave_ctm%ADOBeginSubsetFont: Helvetica Initial11 dict begin/FontName /Helvetica def/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def/PaintType 0 def/FontType 1 def/FontBBox { 0 0 0 0 } def/FontInfo 1 dict dup begin  /OrigFontType /TrueType defend readonly defcurrentdictendsystemdict begindup /Private 7 dict dup begin/BlueValues [-15 0 600 650] def/MinFeature {16 16} def/password 5839 def/ND {def} def/NP {put} def/RD {string currentfile exch readhexstring pop} def2 index /CharStrings 392 dict dup begin/.notdef <10bf31702819c97bedad77c520997248fd01f1fdf56b6d3a7b315c442edce5c5add3ad947c7a59668a37> ND /H <10bf31702819c97b9ebbe8169f88d09dde85a1f31fe5aea47fae2bc2eb00930979f88b93d105e4fbdfbf0b5c> ND /a <10bf317041f0e1611a73fa21fc27e867dcbdf6808a14656ecab3d009f0246cb5ca123804a36a26ea99a5d58dbb2366faf7d25539d80cac6d95d34184a7f2a9bdfab89cd6889b959b2596e8b11c695237406eb4d7b3a950cf824895deacc3629945af72371e14ddce63a5d5b0cc702fd39f6bf2e6fc87d03efa4dac1a2d7813b8f221d7748fe75ed17405fe4254b54e13335d38727f41ae19d78ba4885ae3d98b2de3e97d183528a6d3c63a4f9f823e8ab7f8fcdee98009d8db0e0fe3b7c85313ad0224587d706eb7cf4e40977eecf32d7734c0a8858f221a5c01fea2614e7daf087ffffcdb9f296ef9a372c881b9d5bb0823c310ffeba7ff65722139319a936cd36cbfa07b3a> ND /e <10bf31705c36af5ce09326e9cf2ba9e40765b44f7719a2df4de7a7e9b4bbd302ddbb8bca3151b5013a5736cb5aada3c8c7ff705136bb6034135ede3fef986a1b589261638f9788c5574cd40effd8596b32e31845935ce7376d759140565270e55bf8a2a3a0178319bfc86f8dc5ab051bf284982c18f4333597073ce839cbfaaeb49a534bb9522fc893d89beaba1de18eb3fdac99706c7b6c03e8a023936d6768c7f45febff08bca3e9df06> ND /r <10bf31703cf7234dfb7501bc12db7f8e0cdf9e8b47ddd702be3b53a4a1722c04c0d8f630311553f230b6ec86f96ce489d1017c7df84878cd8f933f22a1e1408e3a9918c4d1c3c3d836a30989aeb87a7ab6b3> ND /t <10bf317064b6d37e59ebacebdd2f5eb6a8d9f3dea45445ea2aedaefca584ea1f9233e6351889997746ce701ddde5d86afdd58d6c5a37c2a5d4eb8f78597779664d2d3c77bd425cc78f54876250a929d5fd8693a8d9fc820d672ac68c4f9b85b806c2> ND endendputputdup /FontName get exch definefont popend/Helvetica findfont /Encoding getdup 72 /H putdup 97 /a putdup 101 /e putdup 114 /r putdup 116 /t putpop%ADOEndSubsetFont/Helvetica*1 [72{/.notdef}repeat /H 24{/.notdef}repeat /a 3{/.notdef}repeat /e 12{/.notdef}repeat /r /.notdef /t 139{/.notdef}repeat] /Helvetica nfnt/Helvetica*1 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray213.441 45.376 mov(Heart) shrestore_ctmsave_ctm%ADOBeginSubsetFont: Helvetica AddGlyphssystemdict begin/Helvetica findfont dup/Private get begin/CharStrings get begin/P <10bf317012dbf686a5a3e938f3e6164c872b0a15c1602662173c17cd4bbbeb9f2eb9ba0a78846edfeeb98b3a41f8df2d274bfae198d77d39e176ec5984f4fe0a0abd68be889ffc4d887dfb9d4689219beceba61229a05dee380026545e90467ce7d68c35> ND /c <10bf31705ac94bed672d56f0ba7147a14014cf07e36cbc894e3b5c077db05479822ddd994576bc8493bba891b1dd772a7d5974b20b2f63acdfff0fc31b2ff4140ebd71f63bea4e6adccc160bcbec6a8767ef0987cb9ac7e83a5a7c5a4b004bc327cea4891988aeb6aa2e4d496faea7028d0cebae46953aa39c9340e64cc3558547948ffbb0> ND /l <10bf31703cf7b0ff8863d021e030de70e18fa1ba738f> ND /n <10bf3170396d6c2645827902b7f2e7b1ceeebd081d8d641faf708b9975f17bb19864ea8f5394e157b6fe332615426dd85b2c8543c8a473235ee4d847520898d6052d7ddbd211438feac7b7a8a4106672e73177e8c70af30c8e22d65ef76f99f06d0a73f18385d645> ND end endend/Helvetica findfont /Encoding getdup 80 /P putdup 99 /c putdup 108 /l putdup 110 /n putpop%ADOEndSubsetFont/Helvetica*2 [80{/.notdef}repeat /P 18{/.notdef}repeat /c 8{/.notdef}repeat /l /.notdef /n 145{/.notdef}repeat] /Helvetica nfnt/Helvetica*2 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray15.5 413.938 mov(Pl) sh/Helvetica*1 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray27.9482 413.938 mov(a) sh/Helvetica*2 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray35.7344 413.938 mov(c) sh/Helvetica*1 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray42.7344 413.938 mov(e) sh/Helvetica*2 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray50.5205 413.938 mov(n) sh/Helvetica*1 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray58.3066 413.938 mov(ta) shrestore_ctmsave_ctmrestore_ctmsave_ctm%ADOBeginSubsetFont: Helvetica-Oblique Initial%%BeginResource: file Pscript_T3Hdr PSVERsystemdict /languagelevel known { currentglobal true setglobal } ifuserdict/ct_T3HdrDict 13 dict put ct_T3HdrDict begin{version cvi 2016 ge{32/FontType resourcestatus{pop pop true}{false}ifelse}{false}ifelse}exec/Is2016andT32? exch pop false def Is2016andT32?{/CIDInit/ProcSet findresource begin 10dict begin begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapType 0 def/WMode 0 def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap/DrvSBCMap currentdict/CMap defineresource pop end end}if/T32RsrcBegin{Is2016andT32?{/BitmapFontInit/ProcSet findresource begin}if}binddef/T32RsrcEnd{Is2016andT32?{end}if}bind def/AddT32Char{6 1 roll 0 get 7 1roll pop pop 5 1 roll pop findfont/TT32R get addglyph}bind def/AddT3Char{findfont dup 5 2 roll exch dup length 0 gt{exch cvx 1 index exch 4 exch putdup(imagemask)cvx cvn 5 exch put cvx}{cvx exch pop}ifelse 3 -1 roll/CharProcsget 3 1 roll put/Metrics get 3 1 roll put pop}bind def/AddT3T32CharIs2016andT32?{/AddT32Char}{/AddT3Char}ifelse load def/GreNewFontT32{5 dictbegin exch/FontMatrix exch def exch/FontBBox exch def exch pop exch pop/CIDFontType 4 def dup currentdict end/CIDFont defineresource 3 -1 roll dup/DrvSBCMap 5 -1 roll[exch]composefont dup length dict copy dup/FID undef beginexch/TT32R exch def currentdict end definefont/BitmapFontInit/ProcSetfindresource begin/TT32R get[14 0 0 0 0 0]()0 4 -1 roll addglyph end}bind def/GreNewFontT3{11 dict begin pop/FontType 3 def/FontMatrix exch def/FontBBoxexch def/Encoding exch def/CharProcs 129 dict def CharProcs/.notdef{}put/Metrics 129 dict def Metrics/.notdef 3 -1 roll put/BuildChar{userdict begin/char exch def/fontdict exch def/charname fontdict/Encoding get char get deffontdict/Metrics get charname 2 copy known{get aload pop}{pop/.notdef getaload pop}ifelse setcachedevice fontdict begin Encoding char get CharProcsexch 2 copy known{get}{pop/.notdef get}ifelse end exec end}def currentdict enddefinefont pop}bind def/GreNewFont{Is2016andT32?{GreNewFontT32}{GreNewFontT3}ifelse}bind def/CopyT3Hdr{findfont dup maxlength dict begin{1 index/FID ne{def}{pop pop}ifelse}forall currentdict end dup begin 4 1 roll/FontType 3 def/FontMatrix exch def/FontBBox exch def/CharProcs 129 dict def CharProcs/.notdef{}put/Metrics 129 dict def Metrics/.notdef 3 -1 roll put enddefinefont pop}bind def/UDF3{Is2016andT32?{/BitmapFontInit/ProcSetfindresource begin dup/CIDFont findresource removeall/CIDFont undefineresourceundefinefont end}{pop UDF}ifelse}bind def endsystemdict /languagelevel known { setglobal } if%%EndResourcect_T3HdrDict /Is2016andT32? get {/+Helvetica-Oblique-Identity-H} {/Helvetica-Oblique} ifelse[100 0 0 0 0 0 ]  256 array 0 1 255 {1 index exch /.notdef put} for [-17.7978 -93.9941 110.791 22.0947 ] [1 100 div 0 0 -1 100 div 0 0 ]ct_T3HdrDict /Is2016andT32? get {/Helvetica-Oblique} {/__Helvetica-Oblique} ifelsect_T3HdrDict beginGreNewFontT32RsrcBegin80/P [66.6992 0 2 -72 74 0 ] /P [72 72 true [1 0 0 1 -2 72 ]  0 0][<~!!!Q0s8W+L!!!!0s8W-!p](9o&-)\0s8Duu!"],0s8W*!!!!Q0s8W-!J,fQks8W-!s1eU7+92B@s8V!W!$D7@s8W,g!!",@s8W-!n,NG1n,NFns7cQo5O\XQ!<;fo!'frQ!!%ND!!#7Q!!!!`qu?^]n,NFg+8c*=5MuMA!$D+=!.Wo,!!",=!!%N,!!!!0qu?_HhuE`W&,ZD-J)C;,!"\u-!.Vca!!",9!!*&7!!!!@p](<o^]4?7+8>g9s1eU7!$Ct9!<9h7!!",9!!*%L!!!!`n,NLhJ,fQL5O\XRs*t(L!.Wo,!WRZM!!*&W!!3+M!!!$!^]4E8!!!!"s1eU:rr<$!#QK;S"9/?$!$D5k!!E6$!!3-"!!!-$s8W-!rVup#s8W-!s82is#QOi(s8Vio!!iQ(s8W,g!!!9(s8W-!huE`^s8W-!s*t(L#QOi(s8N'!!"],0s8Vio!!!Q0s8W+L!!!!0qu?]sz&,ZD-z!"\u-z!!",9z!!!!@p](9oz+8>g9z!$Ct9z!!",9z!!!!`n,NFgz5O\XQz!'frQz!!#7Qz!!!!`n,NFgzJ)C;,z!.Wo,z!!%N,z!!!"KhuE`WzJ)C;,z!<9h7z!!*&7z!!!$!^]4?7zs1eU7z!<9h7z!!3+Mz!!!'"J,fQL!!!!"s*t(Lz!WRZMz!!3+Mz!!!-$z!!!!$rr<$!z~> ]Is2016andT32? {/+Helvetica-Oblique-Identity-H} {/Helvetica-Oblique} ifelse AddT3T32Char117/u [55.5908 0 2 -53 66 2 ] /u [64 55 true [1 0 0 1 -2 53 ]  0 0][<~!!E3#!!*%L!!E3#!!*%L!!E3#!!*%L!!E3#!!*%L!!E3#!!*%L!!iE%!!3*"!!iE%!!3*"!!iE%!!3*"!!iE%!!3*"!!iE%!!3*"!"\u-!!E3#!"\i)!!E3#!"\i)!!E3#!"\i)!!E3#!"\i)!!E3#!$Ct9!!iE%!$C\1!!iE%!$C\1!!iE%!$C\1!!iE%!$C\1!!iE%!'frQ!"\i)!'fBA!"\i)!'fBA!"\i)!'fBA!"\i)!'fBA!"\i)!.Wo,!$C\1!.Vca!$C\1!.Vca!$C\1!.Vca!$C\1!.Vca!$C\1!<9h7!'fBA!<7QL!'fBA!<7QL!'fBA!<7QL!.Wo,!<7QL!.Wo,!WRZM!.Vca!WN-"!<9h7!WN-"!<9h7!WN-"!WTq8!WN-""96.:!WN-""93lO!WN-"#QK;S!WRZM&-%.[!WRZM+9-ik!WTq8J,b$!!WV'Xs8N'!!WVp"s8N'!!WW3"rVlit!<<*!q>UEp!<<*!nc&Rh!.Y%KiVifW!'gM`KDkiN!$D7?"9&9#!!iQ!z!!*&7z~> ]Is2016andT32? {/+Helvetica-Oblique-Identity-H} {/Helvetica-Oblique} ifelse AddT3T32CharT32RsrcEndIs2016andT32? not {/Helvetica-Oblique findfont /Encoding getdup 80 /P putdup 117 /u putpop} ifend%ADOEndSubsetFont/Helvetica-Oblique*1 [80{/.notdef}repeat /P 36{/.notdef}repeat /u 138{/.notdef}repeat] /Helvetica-Oblique nfnt/Helvetica-Oblique*1 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray226.876 385.938 mov(P) sh236.214 390.938 mov(u) shrestore_ctmsave_ctmrestore_ctmsave_ctm/Helvetica-Oblique*1 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray1.83105 211.478 mov(P) sh%ADOBeginSubsetFont: Helvetica-Oblique AddGlyphsct_T3HdrDict beginT32RsrcBegin97/a [55.5908 0 2 -54 58 2 ] /a [56 56 true [1 0 0 1 -2 54 ]  0 0][<~!!!!$s1eU7!!#7`qu?]s!<<*!!!!!$s8W,7!!!Q0s8V!W!$D7@s6p!g5QCc`p](;Ds8W,o!!*&s!WW&t!WV'X5PtK^s1eUVqu?j!!!!Q-!!E6$!!iE%#Q=]'#Q+Q,qu?^%qu@!"!!!9%!!iE%!"\u-z&,6,)!!!!0p](9o!!",9z!'g5Yzs7cQo!!%NKn,NFgJ,fQ<!!!Q0s8VQg!.Y%Ks6p!hs8W-!n,N^ns8Tjl!"],0r]f<@+92B15MuN+s82j]huJ9,!!#7A!<;fo!.Vcbs53kWJ%u*bJ,fS!^]XT:!!%Ma"9&9#!<9h>rVuous*t@P!!!'"J-YuP!!3+M#Q+Q%"93lVqu?^%s*tXX!!!Q0!"\u-!$D4@&,ZD-5Q:]grVururr<<(!!E9$!!iP>5Q1T^#QOi(q>]pds8W,hs6p-js8V'Xn,`Rhs+14>!<<)u!WV'XJ,f9Ds53l!s53nWhuElY!!#66~> ]Is2016andT32? {/+Helvetica-Oblique-Identity-H} {/Helvetica-Oblique} ifelse AddT3T32CharT32RsrcEndIs2016andT32? not {/Helvetica-Oblique findfont /Encoding getdup 97 /a putpop} ifend%ADOEndSubsetFont/Helvetica-Oblique*2 [97{/.notdef}repeat /a 158{/.notdef}repeat] /Helvetica-Oblique nfnt/Helvetica-Oblique*2 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray11.1689 216.478 mov(a) shrestore_ctmsave_ctmrestore_ctmsave_ctm/Helvetica-Oblique*1 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray453.831 211.478 mov(P) sh%ADOBeginSubsetFont: Helvetica-Oblique AddGlyphsct_T3HdrDict beginT32RsrcBegin118/v [50 0 10 -53 66 0 ] /v [56 53 true [1 0 0 1 -10 53 ]  0 0][<~J)C;,!WR\"huE`Xrr@Q<!!!-$!'frQ!!E3#5O\XQ#Q=]fn,NFnquAtN!!!Q)!'frQ!"\i)5O\XQ+7K7Pn,NGQn,OR*!!#7A!$Ct9!.Wo,+8>g9J%u%+p](<oJ,g\d!!*%L!"\i)!WN-"&,6,*rr<$0p](Eq!!!Q-!!E3#!"\u-#Q+Q%&,ZD4p](:!qu@9&!!!9%!"\Q!!!iE%+7K71#Q+QdhuE`^quAt>!!!9%!.Vca!!E3#It.M!"9&<#J,fQOrW)ru!!!-#!WN-"!!E3$rVuou"9&E%!!!!"rWE&u!!!'!#P\9!!!3*)p](9o!WN]"!!!!"ru^_1!!!'"+5d,!!!3*ahuE`W!<5:!zs*oP!!!!$!It.M!!!*'!z!<<'!zs8Duu!!!"KrVuou!!%NHz!.XnHzJ+s!D!!!"Kn,NFg!!%N<z!'fBA!!!!~> ]Is2016andT32? {/+Helvetica-Oblique-Identity-H} {/Helvetica-Oblique} ifelse AddT3T32CharT32RsrcEndIs2016andT32? not {/Helvetica-Oblique findfont /Encoding getdup 118 /v putpop} ifend%ADOEndSubsetFont/Helvetica-Oblique*3 [118{/.notdef}repeat /v 137{/.notdef}repeat] /Helvetica-Oblique nfnt/Helvetica-Oblique*3 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray463.169 216.478 mov(v) shrestore_ctmsave_ctmrestore_ctmsave_ctm/Helvetica-Oblique*1 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray227.268 227.314 mov(P) sh%ADOBeginSubsetFont: Helvetica-Oblique AddGlyphsct_T3HdrDict beginT32RsrcBegin115/s [50 0 2 -54 58 2 ] /s [56 56 true [1 0 0 1 -2 54 ]  0 0][<~!!!!@rVuou!!3-"huE`W#QOi!!!!!@s8Vus!!#7`s8Duu!<<*!rr<$"s8W-!J,f]Os8W,7!!iP>&-'EF#Q=]*s1eUFqu?`shuFkg!!%N,!$C\1!.Wo,5MuMAJ)C;khuEaAhuH""!!#7A!'fBAzJ)C;,!!!"Kn,NFg!!%N<z!.XnHzJ,]KK!!!!`s6p!g!!#7`rr<$!!$D7@huE`W&-)\-!!!!(s8W+L!!!'"s8V!W!!%NKs6p!g!$D7@p](9o!WW2tz+92<?!!!!$s8Duu!!!"KrVuou!!!Q/z!!iK'z"9&9#!!!!$rW!K(!!!-#!"\i)!!E3#&,6,)"9&92p](:!qu@9&!!!9%!"\u-!"\i)&,ZD-+8>gHrVup_n,N^nJ,oW=!!iP^#QN]^#QOi(s1eU:s8W-!J,fWMs8W*!!!3-"s8Duu!<<*!p](9o5QCcA!!!!0s8RTL!!!$!n,NFg~> ]Is2016andT32? {/+Helvetica-Oblique-Identity-H} {/Helvetica-Oblique} ifelse AddT3T32CharT32RsrcEndIs2016andT32? not {/Helvetica-Oblique findfont /Encoding getdup 115 /s putpop} ifend%ADOEndSubsetFont/Helvetica-Oblique*4 [115{/.notdef}repeat /s 140{/.notdef}repeat] /Helvetica-Oblique nfnt/Helvetica-Oblique*4 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray236.605 232.314 mov(s) shrestore_ctmsave_ctmrestore_ctmsave_ctm%ADOBeginSubsetFont: Helvetica-Oblique AddGlyphsct_T3HdrDict beginT32RsrcBegin82/R [72.1924 0 2 -72 82 0 ] /R [80 72 true [1 0 0 1 -2 72 ]  0 0][<~!!!9(s8W,oz#QOi(s8RTL!!!9(s8W-!huE`W#QOi(s8Vio!!!9(s8W-!qu?]s&-)\0s8W&u!!!Q0s8W-!rr<$!&-)\0s8W*!!!!Q0s8W-!s*t(L&,6,)!.Y$!!!",9!!!!0s1eU7+8>g9!!iP>!!",9!!!!$s1eU7+8>g9!!3,8!!",1!!!!"s1eU75O\XQ!!3,8!!#7Qzs1eU75O\XQ!!*&7!!#7Qzs1eU75MuMA!!3+M!!%N,!!!!"s*t(LJ)C;,!!3+M!!%N,!!!!"s*t(LJ)C;,!!3*"!!%Ma!!!!$rr<$!s1eU7!!E6$!!*&7!!!!(rVuous1eU7!"]&/!!*&7!!!!0qu?]ss*t(L!$Ct9!!3+M!!!"Kn,NFhs*t(L!WV'X!!3+M!!!Q0^]4?8s8W-!s8RTL!!3-"s8W-!!!!!$s8W-!s82is!!E9$s8W,o!!!!$s8W-!s7cQo!!E9$s8W,s!!!!$s8W-!s8N'!!!iQ(s8W-!J,fQSs8W-!s8RTL!!iK'!!#7`^]4?>rVuou#QMR>!!iK'!!!-$^]4?Fqu?]s!WV'X!"\u-!!!$!huE`fqu?]s!<:sW!"\u-!!!$!huE`fqu?]s!<9h7!$Ct9!!!$!^]4?Vp](9o!<9h7!$Ct9!!!$!^]4?Vp](9o!<9h7!$Ct9!!!$!^]4@!n,NFg!WRZM!'frQ!!!'"J,fR6n,NFg!WRZM!'frQ!!!'"J,fR6n,NFg!WRZM!.Wo,!!!-$!!!"KhuE`W"9/?$!.Wo,!!!-$!!!"KhuE`W"9/?$!.Wo,!!!-$!!!$!^]4?7#QFc(!<9h7!!!9(!!!$!^]4?7#QFc(!<9h7!!!9(J,fTL^]4?7#QMR>!WRZM!!!9(^]4E8J,fQL"96.:~> ]Is2016andT32? {/+Helvetica-Oblique-Identity-H} {/Helvetica-Oblique} ifelse AddT3T32CharT32RsrcEndIs2016andT32? not {/Helvetica-Oblique findfont /Encoding getdup 82 /R putpop} ifend%ADOEndSubsetFont/Helvetica-Oblique*5 [82{/.notdef}repeat /R 173{/.notdef}repeat] /Helvetica-Oblique nfnt/Helvetica-Oblique*5 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray69.5 213.971 mov(R) sh/Helvetica-Oblique*4 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray79.6069 218.971 mov(s) sh/Helvetica-Oblique*2 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray85.6069 218.971 mov(a) shrestore_ctmsave_ctmrestore_ctmsave_ctm%ADOBeginSubsetFont: Helvetica-Oblique AddGlyphsct_T3HdrDict beginT32RsrcBegin86/V [66.6992 0 10 -72 82 0 ] /V [72 72 true [1 0 0 1 -10 72 ]  0 0][<~!WTq8!!!!`p]:E1z5O\^R^]4?7!.XJ=s1eU7!!*&W!<9h7!!!$!^]=DM!!!!"s1eX7^]4?7!WRZMs53kW!!E7O!<:sW!!!-$!!*&W!!!!(rr<%KhuE`W#Q=]'J)C;,!"\u-!.Wo,!!!Q-!!%N,!!!!@p](;DhuE`W+8>g9J+*F<!'frQ!'frQ!!#7Q!!#7Q!!!"KhuEaAn,NFgs53kW5O\XQ!<9h7!'frQ!!3+M!!#7Q!!!'"J,fR6n,NFjrr<$!+8>g9"9/?$!$Ct9!!iK'!!",9!!!9'!!!!@p](:)qu?]s+8>g9&,6,)!$Ct9!$Ct9!!!Q)!!",1!!!!0qu?^]n,NFg&,ZD-5MuMA!"\u-!.Wo,!!!Q-!!*&7!!!!0qu?`s^]4?7#Q+Q&s*t(L!!iE%!WN-"!!!9%!!E6$!!!!(rW!'"z#Q=].rVuou!!iK'#Q+Q%!!!9'!"\u-!!!!$rW!K(z"9&9Bp](9o!!E3#+7K71!!!-$!'fBA!!!!$rr>:Az"9/@N^]4?7!!3*"s1eU7!!!'"!<7QL!!!!"rrN.Mz!WN3#z!!3*%rVuou!!!'"KDkiNzs+gLPz!<7iPz!!*%[p](9o!!!$!O8&\Tzs.Ac\z!<8\\z!!%NKhuE`W!!!"Ks1eU7zJ,d:az!.Y$!z!!%NKJ,fQL!!!"Krr<$!zJ,]KKz!'gG_z!!#7]z!!!!`qu?]sz5PP3Yz!'g5Yz~> ]Is2016andT32? {/+Helvetica-Oblique-Identity-H} {/Helvetica-Oblique} ifelse AddT3T32CharT32RsrcEndIs2016andT32? not {/Helvetica-Oblique findfont /Encoding getdup 86 /V putpop} ifend%ADOEndSubsetFont/Helvetica-Oblique*6 [86{/.notdef}repeat /V 169{/.notdef}repeat] /Helvetica-Oblique nfnt/Helvetica-Oblique*6 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray149.555 213.971 mov(V) sh/Helvetica-Oblique*4 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray158.893 218.971 mov(s) sh/Helvetica-Oblique*2 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray164.893 218.971 mov(a) shrestore_ctmsave_ctmrestore_ctmsave_ctm%ADOBeginSubsetFont: Helvetica-Oblique AddGlyphsct_T3HdrDict beginT32RsrcBegin67/C [72.1924 0 10 -74 82 2 ] /C [72 76 true [1 0 0 1 -10 74 ]  0 0][<~z&-%.[z!WW2pz!"],0rr<$!!!#7`s8Tk7!!!$!s8W,W!!!!$s8W-!p](9o#QOi(s82is!$D7@s8Vus!!#7`s8W,u!!!"Ks54"Zrr<$!s8N'!J,b$!!WVop!$D5k!!E8Z!!!9(^]4W>^]4?:s1eUFrr<$!"96.:+8u6?!!3,X!'gA]!!!$!huH":zs53m,n,NFg!<:sWs53kW!!%N,!<9h7!!!"KhuWknzJ)CG/J,fQL!.Wo/rr<$!z"9/?$z!!iK'z!!!9'z!!!!0qu?]sz&,ZD-z!$D+=z!!",9z!!!!@p](9oz+8>g9z!'frQz!!#7Qz!!!!`n,NFgz5O\XQz!.Wo,z!!%N,z!!!"KhuE`WzJ)C;,z!.Wo,z!!%Maz!!!$!^]4?7zs1eU7z!<9h7z!!*&7z!!!$!^]4?7zs1eU7!!!9'!<9h7!!!!(rW)u6z&,ZG-^]4?7!"\u-s1eU7!!",9!<:sW!!!!@p]1?Pz5PP5.huE`W!.XJ<J+*F<!!%N,!.XJ<!!!$!huJ8r!!!!"s1eVap](9o"96.:5PtK]!!iOS!'gA]!!!Q0!!",?!!!!@rVup?rr<$!J,B9H&-'EF!<;fo!"],!!!iPn!!!9(rW#1_huE`Zs8W-!s1eU7"98E$s8RTL!!*'!s8W*!!!!"Ks8W,sz5QCc`n,NFg!"],0s1eU7!!!9(s8N'!zs8Vioz!"])0z~> ]Is2016andT32? {/+Helvetica-Oblique-Identity-H} {/Helvetica-Oblique} ifelse AddT3T32CharT32RsrcEndIs2016andT32? not {/Helvetica-Oblique findfont /Encoding getdup 67 /C putpop} ifend%ADOEndSubsetFont/Helvetica-Oblique*7 [67{/.notdef}repeat /C 188{/.notdef}repeat] /Helvetica-Oblique nfnt/Helvetica-Oblique*7 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray111.555 213.971 mov(C) sh/Helvetica-Oblique*4 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray121.662 218.971 mov(s) sh/Helvetica-Oblique*2 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray127.662 218.971 mov(a) shrestore_ctmsave_ctmrestore_ctmsave_ctm/Helvetica-Oblique*5 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray300.968 213.971 mov(R) sh/Helvetica-Oblique*4 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray311.075 218.971 mov(s) sh/Helvetica-Oblique*3 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray317.075 218.971 mov(v) shrestore_ctmsave_ctmrestore_ctmsave_ctm/Helvetica-Oblique*6 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray381.023 213.971 mov(V) sh/Helvetica-Oblique*4 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray390.361 218.971 mov(s) sh/Helvetica-Oblique*3 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray396.361 218.971 mov(v) shrestore_ctmsave_ctmrestore_ctmsave_ctm/Helvetica-Oblique*7 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray343.023 213.971 mov(C) sh/Helvetica-Oblique*4 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray353.13 218.971 mov(s) sh/Helvetica-Oblique*3 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray359.13 218.971 mov(v) shrestore_ctmsave_ctmrestore_ctmsave_ctm/Helvetica-Oblique*5 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray299.218 371.971 mov(R) sh/Helvetica-Oblique*1 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray309.325 376.971 mov(u) sh/Helvetica-Oblique*3 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray315.996 376.971 mov(v) shrestore_ctmsave_ctmrestore_ctmsave_ctm/Helvetica-Oblique*6 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray379.273 371.971 mov(V) sh/Helvetica-Oblique*1 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray388.611 376.971 mov(u) sh/Helvetica-Oblique*3 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray395.282 376.971 mov(v) shrestore_ctmsave_ctmrestore_ctmsave_ctm/Helvetica-Oblique*7 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray341.273 371.971 mov(C) sh/Helvetica-Oblique*1 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray351.38 376.971 mov(u) sh/Helvetica-Oblique*3 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray358.051 376.971 mov(v) shrestore_ctmsave_ctmrestore_ctmsave_ctm/Helvetica-Oblique*5 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray69.9678 372.971 mov(R) sh/Helvetica-Oblique*1 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray80.0747 377.971 mov(u) sh/Helvetica-Oblique*2 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray86.7456 377.971 mov(a) shrestore_ctmsave_ctmrestore_ctmsave_ctm/Helvetica-Oblique*6 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray150.023 372.971 mov(V) sh/Helvetica-Oblique*1 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray159.361 377.971 mov(u) sh/Helvetica-Oblique*2 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray166.032 377.971 mov(a) shrestore_ctmsave_ctmrestore_ctm36.125 79.313 mo36.125 145.688 lnf/Helvetica-Oblique*7 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray112.023 372.971 mov(C) sh/Helvetica-Oblique*1 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray122.13 377.971 mov(u) sh/Helvetica-Oblique*2 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray128.801 377.971 mov(a) sh37.1499 148.05 mo37.6494 146.396 38.1094 145.322 38.6416 143.996 cv33.5972 143.996 ln33.8228 144.47 34.5898 146.396 35.0889 148.05 cv35.6235 149.819 35.9893 151.424 36.1196 152.464 cv36.25 151.424 36.6157 149.819 37.1499 148.05 cvf[] 0 dsh36.125 79.313 mo36.125 145.688 lns37.1499 148.05 mo37.6494 146.396 38.1094 145.322 38.6416 143.996 cv33.5972 143.996 ln33.8228 144.47 34.5898 146.396 35.0889 148.05 cv35.6235 149.819 35.9893 151.424 36.1196 152.464 cv36.25 151.424 36.6157 149.819 37.1499 148.05 cvfsave_ctmrestore_ctm202.249 191.549 mo268.624 191.549 lnf%ADOBeginSubsetFont: Helvetica-Oblique AddGlyphsct_T3HdrDict beginT32RsrcBegin81/Q [77.7832 0 10 -74 90 6 ] /Q [80 80 true [1 0 0 1 -10 74 ]  0 0][<~z#QN]^z!!*'!rVuou!!!!(s8W,7z!$D7@s6p!g!!!$!s8W,sz!WW3"s8Duu!!!9(s8W-!J,fQL&-)\0s8Tk7!!#7`s8W-!huE`WJ,f!<s8V!W!!*'!!!",@n,NFhs82is#QOQ!!!E8j!!!'"p](:!s1eU7!<;rs!"]*[!!!"Kqu?^-rVuou!'gG_!$D+=!!!!@rVup_p](9o!$D1?!.XJ<!!!!0rr<%KhuE`W!"])0!<:sW!!!!(rr<*"^]4?7!!iN(!WRZM!!!!(rr<0$J,fQL!!E6$"9/?$!!!!$rr<<'z!!E7O#Q=]'!!!!$s*tXZz!!E7O&,ZD-!!!!$rr<T-z!!E6$+8>g9!!!!$rr=/9z!!E6$+8>g9!!!!$rr>:Qz!!E6$5O\XQ!!!!$rr>:Qz!!E6$5O\XQ!!!!(rW%H+z!!iK'J)C;,!!!!(rW%H+z!!iK'J)C;,!!!!(rW%H+z!"\u-s1eU7!!!!0quHc4z!"\u-s1eU7!!!!@p]1?0z!$Ct9s1eU7!!!!`p]1?0z!'frQs1eU7!!!!`n,WL(z!.Wo,s1eU7!!!"KhuNemz!<9h7s53kW!!!'"^]=Dm!!!!a!WRZMs53kW!8mtZJ,k)W!!!&h#QFc(J+*F<"8E-#!!%N<!!!Q-&,lP/J+s!D+9!A[!!#7Y!!#7`5PP3Y5PtK]+92B9!!#7_!!!Q0s6p!g+9)<@#QOh^!!",@J,f]Os1eU7&-(Pf!WW1M!!!Q0p](<orr<$!#QOf(#QOf(!!!-$s8W-!s*t(L!WW3"s8W,7!!!$!s8W-!s53kW!.Y%Ks8W,g!!!!`s8W-!s7cQo!"],0s7lWl!!!!$s8W,7J,TEJ!!%NKrW#1^z#QMR>+8c*=z!!!Q)zz#Oh]nz!!!,Zzz!Pe[8~> ]Is2016andT32? {/+Helvetica-Oblique-Identity-H} {/Helvetica-Oblique} ifelse AddT3T32CharT32RsrcEndIs2016andT32? not {/Helvetica-Oblique findfont /Encoding getdup 81 /Q putpop} ifend%ADOEndSubsetFont/Helvetica-Oblique*8 [81{/.notdef}repeat /Q 174{/.notdef}repeat] /Helvetica-Oblique nfnt/Helvetica-Oblique*8 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray39.5 121.438 mov(Q) sh270.986 190.524 mo269.333 190.025 268.258 189.565 266.932 189.033 cv266.932 194.077 ln267.406 193.852 269.333 193.084 270.986 192.585 cv272.755 192.051 274.36 191.685 275.4 191.555 cv274.36 191.424 272.755 191.059 270.986 190.524 cvf202.249 191.549 mo268.624 191.549 lns270.986 190.524 mo269.333 190.025 268.258 189.565 266.932 189.033 cv266.932 194.077 ln267.406 193.852 269.333 193.084 270.986 192.585 cv272.755 192.051 274.36 191.685 275.4 191.555 cv274.36 191.424 272.755 191.059 270.986 190.524 cvfsave_ctmrestore_ctmsave_ctmrestore_ctm202.249 355.549 mo268.624 355.549 lnf/Helvetica-Oblique*8 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray226.992 182.971 mov(Q) sh/Helvetica-Oblique*4 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray237.881 184.971 mov(s) sh270.986 354.524 mo269.333 354.025 268.258 353.565 266.932 353.033 cv266.932 358.077 ln267.406 357.852 269.333 357.084 270.986 356.585 cv272.755 356.051 274.36 355.685 275.4 355.555 cv274.36 355.424 272.755 355.059 270.986 354.524 cvf202.249 355.549 mo268.624 355.549 lns270.986 354.524 mo269.333 354.025 268.258 353.565 266.932 353.033 cv266.932 358.077 ln267.406 357.852 269.333 357.084 270.986 356.585 cv272.755 356.051 274.36 355.685 275.4 355.555 cv274.36 355.424 272.755 355.059 270.986 354.524 cvfsave_ctmrestore_ctmsave_ctmrestore_ctm/Helvetica-Oblique*8 findfont [14 0 0 -14 0 0 ]mfnt sfntBuildWidthShowArray226.656 346.971 mov(Q) sh/Helvetica-Oblique*1 findfont [12 0 0 -12 0 0 ]mfnt sfntBuildWidthShowArray237.546 348.971 mov(u) shgrestoregrestoreAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailerAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get exec%%TrailerAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOFgsave userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse grestore showpage%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 9.0%%For: (sir James the Wise) (Royal Society of Waitati)%%Title: (q9fig1.eps)%%CreationDate: 10/28/01 7:49 PM%AI9_DataStream%Gb"07;3MqXOtHUE&,Zt2iX#A:'t[9GTW5Y#P&/HhVT7+gnuVTWSPW.![_usefu%FFeniQ[s72Z_:dC-p[:Jaogk`?hYmQae,SGr%%-BJ3kqs<k@p?H+8p%n4HQS0h,.atejCMi0fIeMH-^L)K"\s\)m*J!3XfCIgmRh%*$^YCDZ\#ZRIZi+dP]"**lg[+Vm?W<(FMrdaf%kHB)2#>+pnC@cUk=>(K]l$nb4&"gSiXT*UYatc)o]tW@)<u7L!;<kBth$Zqa<7aIkc0A+g]%F]"^"f^GXu=PJ8)Hk&k"Shh@gR1#%GJ/@:?X1?k(Vo=YS,d&1^Y(5GY6<&W=F1\82k/(Zc!e@Hm.LJ9Bt3KJiNV$CV'8^O/8sD3I]aUbg7S.do4EP3'+B<-+NRl<^##j)%hX.e16fmH(CR+V^DhRg;.R%Y=2cn2ImD\@Y1uISM<P-)&mNnKtY7:fR0.[8gT)@j1s7eus[bDFG,Z[h(gc>1UnE@'bMpFth5oRI:%%j#Y,=.74+\WspHr)!?0^N^R0p@>]<E`LG8HC*g]*D:bKGea.OC+O"Z^J+ZJZ2^dAM_dsA57&]<2[:dK[CV5D;&!PL5*5Qsm5>dN%;s3d7o*U=52apcs,(+dL?X19>oeT-MqKJunbW7$_aa[Xc2QOaYJWY6Xq1:WskJ<5:X^81[4R:hR?N;X?VN(=tFhQ.DBbnta!+P`b%l>gmV3G>Ho,Et;35-IMudq^5a0U!;V9_bZ<6K*>bLjpHar',cR5N0/Pg<-^gB@":[&WM86FX>RVjGu=D2?%k$&g<)b<nlrbiio-Y%C271aK9*bJ6H#="KiIm*F`l6fn82,tX1.EFcX0Y$=tJ9,LY^4EQd=5Um1tcVLZe!<Xe=O>WZ)jNrU+j8g4+U[L=Te]T^;[,mUER1%8^.))B#1(#<JLN'^l-22p$)N'[(-@H^SpuiI/<P[HbOa6g1rW6!Dfn#="e`H-D:rSWC@D'>r,HopJmt_A3*ptS$c'XLWmgXEH]4r%B@9qTmanYo='q%Lg4t0e?XJat\8/*Ns3Z;MB7G^3=6YpKMJB`NDZA8;`KT*nbSA[tfjg/j.hUX_m^7L:cho!+h-Ol\nGTul`G.VA%hX:-$s'!DJTqsg:V1X[A$h#f'<<!a^FhJKAO0c1bZ$Na$]=O66l=tOAro4J&=b`@:c\qJe:gMj_=0DTc3s5,aMs[Oen6W1Kotu]3%f.3!Mo_tc-@DDf<q@VGTY(s/Y!R>'O1."4:=\=Au;`Aknr,SX5&$>0;eE>$RqYD>f;p&U4EYMJ9F<[^&_1)OcYHF0QW;W`9^09kl%Mm?7IMk]kCUH4kP;ZsJ=^=E)Z]t+p.E4rka"In[mZbBT`G1C36\BqU"Fgg,>/^p$9RC(`pnaZ!mF7J>9@P;!dViq5>bI<E.9ssh/%q5-3"q.b?1ls@@eX>E3k\n<WRm_/0&r6:[ae:aFl;c^&74BkB(E,>>Ni5(Q#lK\'$:%dG*T4b@6J&8OGdM&>2</ZZmR.4K.s0R*=%;9Yr*]\Hf-@fmEaD(8.uLq6dWh_$fZ4KEr956#=C,V3j`;(j0*[o[q^]a"i.)<CjZ;Xe$^"r;#0PUIPh\QHRK?&3)tY,]7_rolY#%9h6#[5Hc_n%=bS4Q`JBUC0L7N<rR3gX'\oNg#&i3lRN\Y@ugE;+!6>uA0>N7r,S66HV+$og"#A#Z%h,ZHDm_.bj]hohq#7,jCC(b%TCC*<^Kp0BQgr2+-=@[_oP=F+%*Qo`B#Wd0Y-kiGD`/o0XtIi_".=Q[Z`dPb6EKG2dnoYXM$e1UVK/Ej>HocG1Co$N3%kKGp%mtm%I\B>NA:1\JQc_?,!PIJtc=!_tP/dd\Xl."`&u:3'oTRFRjXte[d"s.)q9#*k7[0dUKD]Ria_e`<:s7`cC*9r]gKXY0[8)>^[I\R'%-[aGlgGF;`%_n/KPR<C:WG+pg9CM^,;R&pfgl(.NUuVqCK%gQ$[e_9GeqiBD[:i(0=!M4H:cu*bdr]tQUo[$(X_BlmdY^':=HqTu%D:2Ok.9_97qHM@?N<=<?LE)K*$O/8S(^-Q8O8)\,[s0Z;df@r)c;o0<%C2K];RFK[/aYYkTf%9E\OLqgE89BPnH%>L.:V&9-IScr%DTc#&S3r8J\Z%[?*7P987U!(]"]s"N5Su!c9D_ks&ObjP@j*Z!+RLNujaY&Ie2/qZ80K%oSY._6/#55$.K(C(;PZ,`R+aU`7*AdH%^Ub.7"E(Kf*6OHD.C',;1Kaid1n'\,kb3r?<f@pob(jE`PH44(]u#"0,K's#*tIp4*t#!qWXloQ4F"6#'7'9?<i)Q^IOW&kbgsUm%Fc\t`lgZ4A6C0geJ[t.j]nWU"^.@.f_?OEgIKi[r&%6(g`KSBKochl%!fJB^gA3Z7Dd+A_,c3jlZ=KAfN@3@mY!m[ERB.(5=-!hA%G_?WB[LU7ofCDMEPdHoK;hE'pVOe@>mVE(UKj#E0,)Is&L.7e=&RR'Je9WED8OPkC$5<SkgYT3'j@M>X%M8;!]=7s<>'+[+\eX4/%iFNDNW.^n\h63<V75mYjEIrZjU9@@SFXT0l^lf"%NbqUE<2@E-j&ip^4W-7J9[K>(lju%nqOp4TdU*$1e/0JR@L+!4qFXg)f%<`$%7772/C&/u,!`/$tdWZ^RER13Z%58>><3.c>qQ*4ij#[u4BG5YFk\rC@%f._IPFa;#)sJA4C5:]$c%.6U*"_""8M$uVmmCTB4?$q!%Bbmqr;F%X0CMd<5P_VM#GG41;Vqt73f@I3HqghP)?>4Xu7-(_L)^/+^f%_ig'9tq+`!0DBVRg+j]<[iOmA\OXdRWe;Uui/=>^MKF%da!J'Mj/)Sdl?V+iDrJABV<"l:"6mH-kRIO1fF^'D,<mPGBe^QZG!B<r]n`h8c"j&"?3$EF?gLkH?):ifFEYt5VZA!&IiIUFp;+]%KN^[$-Oei6jjhp[+V?Dc9'o0WX4U9ql??[GlM$V@hFOj80OKRO3"fAQ:\#i<g0j%EUJX*LD)H^pkgRn!9Q$gi+>#`J`Q/GS-1u!q%(U9`&1"[P<?/TK0fTGJB&@ta7K_C3RZqP>%[km6"D6fuP[gnR;W#Ucg*33hIm\n/FW<[!7#-f;Om@^`l=PKnT5W7$dTe&5s^(lF3%2;40uY`%ooD,1LQo7IrcDGXh9Ib!HJfu#u?3<*!8g'?+kT_<2,I;23RN3il7:5n!\o`7IWKdI?;K3C-/p=)Zn;1/tSYR]6;E6rB-%P:n+H%JhaKMb_`-dW3P<>_AW0(:DXFQ89VR%^F+$Tsc>8eSKpB`8?m3NQOYmP(Qd:<o4/$#YDi4%V^I9&+VG3.PW,O:>2-lh=+(>%;@1%\NoUV(VU/PD-c>^#+7@eb1(&E%FkaKg:Y)jVOl7LU[ap"2a#b,U?o4+$%ASa.'N9co)okLE`[^<n$XmrX1)rXf#'Pe7?lY+m%.Q%W0"+M%=fiC&j[uTg=&Y/2TQY`A44H1=/HON.N*CDP8TN9<"B-Z#_n_q4KZ_]&/Ld;m1"B;V;4ChPXV$Fm=>olD?6=;[)/q@Xq%70i]#dS+EbNUQCfdI3dY:3cCBN+aah,q<)V,2jT+#UWsM8d[hAFKhurrFsg[C8A,-6<]gf5c2YXhj^(F@JP$1H'kUMBG1i@5DGI@%7o*0a#qXW);!lP>:VO;Aht3T!502ZIr"cFgrUd`#gE/Kb2jBo0pTPdAcI/L[)A,C<@S-Y"muL33`p(euCg-p0@>0OAG1Cr'*5X[%%C).EF++4[-csoPfMbkI-ks:E36Pa+gO-iM8j7!W/WYU)>8LDhQKFO>QaWuI-478e>b?D!(Br7RJCrk[H8ZgU-BL);^r%]"<6`qfR%Z3J#pqhT"e@ik@Z5sq6I@S'NlY!,tu)b*(MO"g.Fes]]9gX[bDfSZ=FO,_C5_XUHFW!M0U-=7?#R?Ds:=e-gFnms/_lRSOW]\Zq,%';(YbRH66%Qsc2?3kbBb=LDdk^"j]02tCsp&qfoEomZFS-"]i#p?5u!g<5hPZUYSkZR<rHKh21%m&S+rp96UTp9<CYXNmD,Yh@_(%.E=b@(;tC)=K_DAg[4*7oul#tK[K]*,%!h#/*<@mXYf>nbIU;Kf8>$Z0^B-ZSRAUVIWi.ufU]nI1>#lah'je^$@8bG[j1,'lo)[d%/7-(tmE[D<^t%]Yo<N!fLXgj+>263FR);.8Fh?>.%VJm@iUYopjOc)f/m`CJ97*hk#e#XIbjOlMYMU>F%f=5aC:i-uFJ^mjikgrH%fqYarT&+9!2fE:Wl$@DtZX$qoN^3./h<O9AHTOrn*Po_Ph>ZDS-)a4fn@W&^/8m8lRfF4e*_QIumHOn@]\*11FXC"r=`!oDftC]F%(E:JXEa<R+d^[>.]Y9Z.?>XnAc0FjR^*tF1S'CdJ289`s?(F.,`cr2N/c:!=[Y'ND>mO#7X"AfLaMMC1NA$0QDe$@*?EE%e+WuVU%M<Fo1ShBaFD,FSq=M?#fln+';^(KJnluF\C%O**nT3Y)m]*elNgO&:&Y80't6mQ+Bo^HI:HQuuT4+!3KkuZR0,F+:m&qOC=HbRo"%DfV!=-38Oi5Yi-YBne:lrM`,2Y7TUSBYN(o(MKq?S+TpM>8q(a=RI@(qiuabQL#=>XgM6VcJI>_]jC&D\!tA(62KU/CA$'/EZt6j%0>?H:Pl&AA(H8hXeJHcFnhF>TMYch#lK,P01+poNGW$m]b:u%Q^A._k`_1(>`Vt%724BRZ2(gGN=DH!XLl#cb)=OG[lNAL!7kspn%G!ROqRC(?+YIBE!m-1kLPplM%iEb%/d4,81e\,-OcL:mN#V&)=csaW?>c]S3c_R:>Y4/#gmroSW92SOO1TVWg$Z@`DEV=LdHG-7h%@PXR45!jH/o;XlV>YBfY!Yn(Pp>p%1=GVrL6Q_K*s0pP/l]kRi21RX6X'Ru>[sb[=]KF[#U?YL!r).e=9Z.)"N3dHoe\>`8iUB;/%i6d"gqq92_q+g!_IJ*F&."t<am4]=mAVe+-cX,JNhf8&YLNe.EK09-?8c6-)eXri`s&)o79`O'5q#R'=Ij;CCH(/1odL>#,pq7k$%?ja^Mr!.<;FnJ8Ar;h2uq7sX\mS2TD7,Vk!@;+pdVP_].88@=901JE@k8lEK8:.M4bqLD>+;>Bl@sgu(+K8D1n_8mL+5`'MpI>)K%[i(-=kJgs42nh4l-Uh))6AaUG^.K"XRd0j2G9]G;2]^erL9pn_m:K-?I7gOD7V41]a>+5iO0*1n1i@fu\G]:bG"6Cr?VWg$S+*<p%@<$OjbhVf.f7nc=NO8f12EVWlBM3$Z2\TLkp8lJd9'3Q#NMHMQ5Q(f=02p>fl?Aq\T-LLb?E70V1;:b/!e>4O^%g=g,.sO\+AQ)p%#79iZM!aAmoh-Fd]`8Xq00o.m#ANS<Y.G8k]]UDsFOM3T]]UDL&G#`)'&F"XAo7tfI4m'5DfQ,3N<%,@N4409l^G'hJ5&%c^'C<e%$!bQ&oR-do9'/D84omtjEZfe&!9n-i`-"dD\MP*<4A*aP-qstD-0Z;3-;:(sedP.a-;[<N#,MV>W'IGPb@$i;%l#dPi\M]O:nX!F%$qM%(TKq`IU^8>D+ERb7KG$i?7.qs?4!_/'Z9<igKE,#8Sj@)-"A281TJU'YV6ji2RP9:"`&;FiOa>%tQc*N%6&5eGd[gIC)(L.<%V'AeJT`QVR3W]Hk.Y'q^4&#1B[L!7;EKVRZYlZ6tj=hFq$CHp:_[+Rn!>?)d)#ZFGkS#'s-,lPYEg!8F[[U0c_8VWO/eU4^`KUuf%&j*tLPS,TF4G&7iKppLXq`n2=+D?s2N*mf;!Z!1%_*Z!A9IUjQoK<1K-jt>I,;"#q$#(8^9I\p%2`%t2;SiU#1UrfM_C<kM=@b,7%?OJ[qh4E-uI4eS98ok1QV7hNi1hUc)i_-dHEs<GW^4]FZ1U&"sY#'=nAjjbQI`SPjrR)_.8IcT$9#*]7%N(C%^d*&Q(m@QW,s6qj%.13L4$Qb!T,YUVu^/jTa2_2:F_h37@7]MFB"9"eh8f&XYUWm(R0%*KT$++1Sm&KU05:Q=2JD7V<GYKR@%.EB43tuih,3CnN(@tgD%UdQ3W4%PCh:Sl%fo+Un.3O.q`S4$l^/a@@#/]TljQc]X-NPF3Yn00M5jZSlpjitujlN=l`o\f\^po!dmhQ.33O6m_3VscX*H2d]J%6/Jb!hl3uDBnIh;M8#/E-Y7=%\'#("[=]26HuH]rD/abe`pu<Yk=se)<8%Rf2UWW)Ntm:-P*P9Y%UIFeoMSW72:W"'3aup%Z$eqg%H'Ot!M\L#*BDYW+S0I1*5VQpC8YbG3:C2C$Uul4%pBc)E=<VE*$`4=nV&W8\PA03L$LfKUF,(CMBulc#i]8B9VZ_-GQ\+p)aJYS;%b/7/"Sl/asbmHm;WeTPS-LZ-f&36rO=4]bBS5SJsg>VT*Cb@)(%8J@b;[WFjflnm5;p+.MJ9bnF]1^89)Mh-;n>SaB[_Z5Od?Ks0%>mb^tC*5OQf2HfZ3VPGhG#t$_2$="65!nb8A9!IFGk?7Ki#d0L:GLlb>hf%RkX]KL5>,\=].IA[X3O\JIs^hJoOM6&:Y(nN'OW"0%F-$i+K-*7I@;`)/;8R@$!RUK@iCAuiL&8"U@RfP$U?l,)&b/@&Mjg:Cbk%57Ponm>9\;L9R;nb>FAnWUe[i"BYB-+K8J5LO7[OsI%`Et#A6KLn)"#1_"+A"&D0M+?HacF!<iXf'Neu]tM';C4dl;QM$[Wb=Wac@J*f3/=s'!<"q.4:-M5D!$P!c5geQcKF#I[G<pn\t&T%\k\fh1U[q:c_i5S!HFiTD!+HuFn5VQ($5eDfkLRlE'DbhO9&q@CEmCW,Usr0ZrmR&G]VM>i5J;bABojskNm.1WN"+Sl[n:IPTl>f%'#k4sC&3"g]T^?fZJO4`+nQ84J(P&D)X.o;:Ee'B$4i;Z]+ra&R_cuMOl/\6>:0d!Led=!L`_Rp9eB*q3`on0e=LWniO%$h9]Vne%`.@D=9LlX=?2)d8#4JkceKLS&SfD-aEGA_"dki;*Zu41s\k\Y>m9bcseOr6;Oru$c.;jP`c(eL/I2OUpp31\h^(>NVfg:f5%m+M^%J\n!i@7i#N@AbpcOK_S11.dj;[]qL?\7OR>TWD#%o<*soa^H/Fq4T4^;'*CiTc=_>_#hsJ8.UNPHST/!<G+']QpHuPCr1Kn"QK;H%nMO:NUF%aYb.N1_W_AV4C.S2sBdBs-3Ncs"Fid36i49lXUPYF`d`Tp=USa:ZYA8ht.8_i]:F)V_8Va;b8f!5/bX"W,YZY@u"5pR5%#CN<4;%\lQ%0V/U&/j$`Om%P[<U3:#T;h@_(68T&MOj$PRgUTeQC"P]U2DQYclC.e6Y8h2P9hIh"V*LVNouD1;$!HWFHcfAZ\/`#%6F9[2QGqO_i@IJSWM19R3uVlc3RD;+"usu>.H-@%QW&otdK4s?A$Z1ICpf>#pEV-EV6kVb]0T$RbP(=e9b<br5;Ej*oj-7Pf7B?,%W=)\h1JokoQB:c6'/a"0"I9H";3''c&h_F`SPa'VY0WfGfu47elQ]XVf&AGj/olsE2>#3KN4L/hF.pb[%qD2BJ./d21>&s7U_+hm%!g?kP[Q_b4i?K0D"cPTM<[ro=fU)J7WjUQB9fE!Yg.4eff%NZ3acAW.VdNJ3CJ8H`YU,&:&ZeN%[^N3c[]l4uZo@kWNO/h@51h]g%?Bc3k-h)sq,&D'?=)b3[g.!E/$OVP+N='R&/fOBtPVlXm$Ys$#L:td\UI^SlNC(S5+;tuaCA+MR[8@a+rPr6Hf%af/Cp<L^F>A,S%-gUB3/!ZqXB.3r'$cX,)#.HEW^rV3L(8_/A6&e>l3^IIEF(EIQFTY5Y\@Ib7%([_@O2fk'0_om01[>I&&(oVkGJR7D&K"!-<?!Gu%K#_'`OGpk2<d?GuEq>Gi`Tl)iL6Cp<\<6.uW7k/.qU2og:A?_jin?5e4I_L8p=QS=V8m&+*>W"n,3FP+@S7f\*39$Gm#1`uZ1bft%PdrGdV7eNi\\T@]FMT]:dDaq`NV$V-Mp"/d^BItVJ-Wtq^e2dRTQ8LbNFi`n>Kp&VDDos5buI7f!t$,H`!cI/q`-RR#.[)[CPoAI%FL<8[#g!A2YY>?qh]jYM#MW*T/D@c($8E)^%bU%CD,o-Uh<1>2@8$u:1PkqRJpdB/F2#@l+j=eOFg]qQ5!)MsTl3Y\h;J50_uQo%%p'k,Gii9q%UtrG_Kp.Q+c<70&0R^#_)Ck_74s>b'+9XEUdHCJ-'V'-jC2"kAKBnS]&-AcNF/V0aR]I]-%X+8'H]F4U1IQ0*TngRn%o.2Jk`?HS64&0NE_M[EcXPj)">#rM\9UTITZ+E.mKgh1J/4s&]:]?eY'c=oT8WCili_Ll^N6,G`-TuIX.rbh]&Rm+:/B4Kmo.5mb%_gE_63/VHsK1u&lq^7PIe@Bh.q86AfgFOYAk=PNIhGX/9_<B)%:Sj%A5>`Igbj7/4;]Yj%9m-5pC%k[LA`MMpp>^"UL)+es=IDIM%Ro;m5kP5F#A_Yogp>`e"mI%\RGp4]u4?nDaURQ59f^>mp&B9eQ[F&Mal9-M2#&?E5qh@QJ=HqkZF-1WY+N(jKVn(n@7YWbR$Z.S1%Qu_Zd2!=ZHY/nYPF6uFi)l+caYDDJN10?o/`jG=?f7pXZ9Ci<,n;GNn1Gq[Z,]#Bb+IU^q#U^LRFGWlS>Y-0hCgXt->Z7;ck"RrL%q^iiX=*0hZC>8[2^^V<A@SX?%A]?2U&t5J%U#ShN%,D2\o+)1EClJ!hF>W@+4F_rXjbKAF#?-qVJ[5D;$R'm^WjXSG.J48tVW<D4%NOB2r2FTRd8qc#lk/Jj7!A#mLMJ^5A]T<dX4-_mXjb6BiNVnc$gEX_0aC5LH3QH1t"adlA5$j&Ts01-OMMO\s=Ll*qqha0PWjeVK%$7B$CnsI2H4*$tA4X\ar$0?0$!L#q(;SSK>37[.iXYeF2+#=i6IeCnDoa^krifad$@=n^Vm_cBtgJ8`GD"<m.5beJFM"?iJ&St6[%&)kX2D;6",in1sU`s9c4(1FI'AO6k+R-@jqIpIu=)*%AA_SR"6bpd3GVQI(ae>*f:(5LDH1#Md4+r1<)=Igfj=b=#ho/=oo'SM./%85mQSDqe'$8m>n(g;jOre&36hj7`uR;,O-dbqk>J6rG!5F$!qDjq\o.o>gQGCr+H%MlVm%dB'JO-K@V3PGNNI.>fZX=k88/$&\k$%P"[G]#n&0HoD0M,I9[[>.WT*s'J7mGf#kG8Cb^Q"V7uD>0a]A)(kmp:(f?/H))6D/OJ=@.=k&*Ubh^r$<IsBP<EV++<LWCS,i'q"%=[JcqbYsf`Bt+JIaO2^('UtuA$O?g!<B;rY)<8`6l11&]:g's,X9i/YWrctSWacnVA<$6l+;t1=&d).XA9+%D[qspA32srd^8sD2%a.K@T44R:r2h]SL8@!n.?.c]%H"EW$^.2rY/!dj6hk^aY$DZfu2j#Y`9?-QPdh>_OdW\#AF7He6TT4_D`-X9M1_Wo4fZuS1aOfh3%bSd<G1Jd[:_4$0.96qXPD5Ngg9Kl6l9<?3Gli#h0eNBSJP/ug#E@O"Pn%DAD*N?Q2*lTkJJ'@iUq;QS4g8):0ig"t9du2Ad%VPa2%rAm/)@\Z>VR#A?GD&CV5jY<T<\D!<`n=1tC?/5#$cNbF9(Xp\$1b4l@S&4nVn#<ZFmq#'VX.'k9*TK/h1AGJR;fF(Kl/k-hh_^^_%a)Rr!DQsJ/hF1'/5VpLqdbNX<\1?$9nNu"AF:FCfYU;!,9#[F@EcELr-BVmN=/AQ8V"a\&8/T6[;.rW*@6@t8Nmg?]2qC["FaGn@%3.!ZA;k/du?9&VP@Lc9T]reYU50\IMaHE%o<@1Z3ag@/o4NDDZM1`/D>iGBr74>"OY1n8LoG6B2:Z/`eb2aSD>t-u_XU:"/0TkQf%aBD390a!p$iQOOQ7B5,7MWRC,?uKmSCV"fGGEsW]%?[qWLMLjdmM"\]8d^#Ib125;g5$KX(RBJ9_;TO9FZ2;E2h;8%*S3<)Eh#Bt%eF"!h/BmYHDeRT#a-s:+L&Jb]O%!U6nR\H.nhQ*0+9N4nI>+bbZ%gX;%`_JCD%,ATa=ZC2U?rNN:ShX5:'t,[YAqE/64^Xk0#,PJ%4^aPpZE)8tdrIpUk@%lKUMt0b05=t#Ch`G8EMso;D(nR*.*GKB[^P=O^Se_S_--V$:h3nYF@KFMqhi2rdCT836;Vuu^kjj(&H<mT%e)>[C&Ntnp'pRKF8Zf-qoU)usP81p*L`j[QVe+\UA3=OFk<_,u5(_)GH8%>qYV?[6N&%)Z+#>/`#RZB.c3#4.B9l".\@EYPRTSKf%,l*)s:qHl9)Y=`137&nuHt34d=*_7;=T<YR]2X3P*+?<fQ(HbW!/SL+9Mok!VW.ALXZAg:E;5pR?$^f%)_/%=6h]/3HYF#VHl&go%I=cO`oBL+[c)ZnC_\"Y'+7Zk$!Mc_[Nb#toeQMQ":Zh_Wop6i')k_nL!G0O4fD6(7mf\1JYnoe\`,:[hOS+7EL<pMF)a[?AplKeg%`eW%W&gK_=Ll@-Q+`\dq$&KCj.n!^^^+cPG8#tCpipH$niT4OTJ\'+_BJC^&6<^W9K]$4LR&3F(lH[f>.<hu;K`,+p<Mm^=]aM^_%9%@Y903J8cH&UslVJ0FceR=b<&eHG?b]-CjZpiI("`[juSnZ!A61?m]Kiji$<s-Ls(6NYZS]Z`hLt7\&1t43$/D\*-"K:>]&Q1j`%()T,"5f6+<=SfIs@h_En4a.VcG213D:Iob$GUe>9&BH&QTUYPK?'/)+'Jd^#WW[GQBu8\9/Ha0$;Hblf7h5i[]LH"ng+231NKZ'/%#Uaa>:61*'N.AJ_TS3u0i7)2nPgs.I3I"<Pi]MG$Jf$HI>A;?Rg5m]0@[f5"M$>s*QtOu)VJ@C@g+fh+Y<tjD`Ygef[H0F=_TYDh%cNqo:T69grU$%A1UZOm]N&5<_`$)WBCa0F>%^X^V1N:%C\55OG/>JNtiK6HbW')L+?5f_WeIq1HK0Wdt7aSAJH65*[IQl+L(D[Pt%a&M7FMc6%:e\'W(N.#NmAB,+&OIebiom<X_5r:'DU2`/tW0_*%rc8m@&5iMq3IH"KU1bRn<TY@c<;SZc5nD=3.2dZ(K7YC%^'1Ye%=AHcBnPBh@;:%<I`Z`PDV\+pAW[`[>)i+e>(_F>seT;52$`X`1f[nM9+l]#'A$e)r^Y#)TkJ0,HdIGG%$3MdDFDVGpS=W9&Dk2c?%AFDpn^fcDl1u*S3F1."`*]5@,&(.hnD)B[\&f%uea#PA/humc\nGfg)r4&)FRpYq.nIc7j?m!7Jo*G)j[0R2I0PR?3>%iO(kEh$a%i?e^S8fBkB'B*?Kpf%L4jsISZ;jnC9Zs0Tte(>$'>$G)b3)U^]5$0.o%cqa5&Gekfiq.6:?opcSiKf?]@Q"c2C)++Fj5as6O;t-S%aDf!rpuc]hI7FZaB+B\qgeo>!2.Q`3,q,G65W8tWAQrPQCUe/ViM[a9FslR<rDF>ieCq,;ikCL\V-.,VS'c9rOe<S*eJNEqE%me`%CCNWp+[%d#5TVXK3q"n!98F';7ia#=2\\beDLda90s7"m^`)nZ<!8YsB?72Bh.kAh%2M!GLU623:OJo-AHGXGFpJbOomnGFRYcUF%$B0fd@)gUQpi6./die.?YY>f`6mq[H(!l:X/IbaURb0knMo.qDUiUjZ5c$i(eKS`"\3%u_MPo'>^PAhkR=\Up"OHSrR`ClCH&eJT%(OZrGJb8!7\(ZRqJ[@NoL=7)>Sl\ta1K1C/3B/-gU_adY[$5`bVB/44n[VSIi<4WQCWL9K/)s/-U>%U"POO=ce^:&9\p<Z?kerk]%a&Rt)$5N*q9]hX?Dfo]-Y6Ft@^1FC[`SCqcH`(OqK]Z^sRMY&/EF(b]+1b$6>[Ce^9nFlDjp_P2.&dtf,*"_oYJ$Usj+,`pQ8i>`%XE%#RrAk-ko0dcdaG/k6p4eD@U(Pl@d\,EA`m-Rc]e>!da%>&dJn(0O7crW$"ch;US2`:@]"s,V*nT#fon&t7d-:+<:g#p(%C[oc%ZQh:A[th=1lJrDS&%bZL!0,e;/bdlTQ4(n"#&J>D\XCD#_JcZ%/-J?kK'40$=l]UdP-B`_k3b44<O@S;-&Zb=!(2a.cgYdb=\iD*%;S`9"*;(pA$SgI@:ED-L7:u*]S-2hbR"-Nq3_hC'?iu">F\.EA'snE^c63GH[+GQ/o6ZOf>BCOM2L_=/drWPjXK?^%/;]\TXDm"[%M[b%A.Di'Q,\-1oXPt(EBHpfq%CutpSjJEc"pT=0Cr`RhQmiI@O`_,8dLPWL*%kW\(_)+9C!)78PZeVk1kqG4%3<ZVg;U^p4m=1J%r?uA;MF59kqqqllcP=G<`sClO8OdP*ee-<Nci]XeURZD`O4LEIBK>eH=pBle4\:iKZXUc_iUt%:&>$dh"BiB_C2UpuDQS8>@fMKM%+]o&f2`mD^.Bkj8"g>^^$86T2cn;g56i@)QI_ZsIl52LN8*Y09^f_/1_)&mp&CUmA^qif_Ep!Ea@VV7BK0^H-mXaa<];'l&is<on%+?6Iupuikt^lo)lGS(YAhh$mhWf;ufa2*(:F!neDj(e&q:al[XH3m\:$mS]t6.iN>-]l2@^qRmmMgg8qR+LDJK#:'E+o2Mt<nWl(%-b(3"F64f?6=X8B'BG,cYAOENBdTj&b;'c#E"dW$>u;UGmM$_5)d$G!2:=o`_.-5)q?c"u;(qMS]\7ME:B5?LU7ZtF^2Od*41+IN%UEE!Lh?6?b6#-8O;ZN@*Z.)\P<P52`ScUh;QnJ+I4A:SYH4$6":XN+Vm\SY#Sq;_4A>?%FfH=_@;t/EJOe@\3_Peqa)H]V4IIn8q%qW*@G=('Jcd91EjL1m?gOE!?A$`J84"F%\u//k7p^c.Ul$P!BEM=(H=ES!Cc$dMXJ14MSXXQJ=noG;HN=WcH'HjW&&E#0LK"!@IF%NY/]L<PcU`^`NHaGbH0Gf:e#Y0OTZmo]XM/^qg>bM&q;9edqbciC746".@2[h*90gNre!&Jd3q]^GPp$9jr8TP$eiH6'jlD0^5bn%K=o-Z.WlUi9Jc@XAam8\XtE(2J[u7\&/eB4_8BDhK$3(6p;,-fn=E[6\d[6P/:E(%63aFX_?(,XoGN&"is!qF^]AClaF&^bip&=-%f3#(+"#`MZ%Kgn!JO/oF"="+2[I3Pt-7dVVn@F<U4U.&5"tZFfJ8N%e^So<eUf(J&OZLfk>[YfUUA>9.Tmf@N)I-'n4ua#,gh(W*%!CnW<k5hJHl@Q/SS;,B>1T(7Id:lb4.fGGNFW+)-U!L@U8T;A&?3B%X'>4Skg5p,nGR`M+FFr*EAp6.Z%3C.ec+O=B]oG!s%9P[3%eRe#'i7*V7k?\8"\[Tt%O>fq'Wn/@+@#*NO^uqkW:':4"Fa`m#I*ZZ1RFctQ"k8$Rf,t,'I2fhR:3X.+?:1Wg9*_X$aBB[u"t\=q%k=,?&crK'Elm,f#?%(]iFI&@So,AqkD`h"6Ti4<4o,Dq57iVC2ln7lVq@/84M=Z,[2frJg9)Sr6;DRml]#7/bEO\ikTn@+IU?Bn`%BSSd3j1PjU55-%Cm,s:e6Z:KVe3R<q#+pWi3"C@0F$DVo4cDZK*JY\oK-kd^HHcB#kW&4#YrojBkb/o2mPsj13^,M54Z:<kkW&2i%p;a.#2+2e5a?DWpnl?9<E#aBh9TB7r!>R?*DZJ1(2<Zt)c$f'uKARfDE?]Pp*0@Gqd;ol;[ILfjcm.!N4U6Om9b9DlnBuHik9/R?%h/MX?oX]16Y(O)`kBu\YoP0Wqf)]e,MpukTm@X1a*B#qhd<D7j%+0@9>NQE;Pd\.EU@Z_t%_Cjd@(Tu`oAD_RKssP!H0?f%>]:ag%lZ/d(U=4,P3B@/mKA!WZH%;,<D=0Mo_k_4Fo?^p6W_Icnd@F1uTkh0Y;nWDE?[<8?]EaKH_B_mhVV#Q.krj.R`!#P&b6Af++4(tW%&`fdD=C<#@s3SS*:/gEH+$c6.U]1>n(fQ]g+R4aZ0$6<2D15Yf(V9dXb%*.D`&#VOY4T'1*5hH-:CZ;$k%S87T=j!n(h;CD4W9rE%(4>pbX9U[U8S]WZ@4)J\P@TblU.&'lL9qm.s/j;eqR#<cNRR+a*Ll-m4<FU7<*Q5NARm9E:*9;9j=oGEAApspZ++APqNujpd#:66%6q%Hfd\p=@Br"S_=[^?(cbPfZ`,o0.'#U>>WDA@EI19aD6Uk+N<&-6*_o</V%;-!&_<=[[60R?,a$H6q+25j1fVD4;!q<$)-Xi^g%<&)i-ToXlUZLj>ieN@@+OlVXKg[qA&8VZ?7*1O^jcE7Jr)9jtCO(@a>XVu5=geU80`TRPmY4.:LP0bHXiDggsEF]WU*/&o$5m[md%_Fn^[nB.Vfoc#&DBaAP&:KjLT),$#9s0(m($j@Y\'MR(>q1qk?\8DbVQg^B:Te@HC-O0oO8#Yf'2gj5sDW49\Mn)0<X%)#gJ>%d4%eq>m%EE5Qam7#+d1!hk'&W-L_W>m3Hp4Vq8CKXim5k$IgZp.+j,+0<Q!o8`$4%=sSRI`m61ZnV%GH1O`qTHh,a<Z0Aop`RX0Dn#]%emS;a%RKli3D%JO13FQH&EHoU_/[+a@@Oq']^A%QT0_[N+c@ROX_MMcD(q[jccH,3EB=mP?56A+T/E`7(>NBEaUf<.+`TqX'qVAE%XHE@!4PTj:NbA))?.itf`ngVQB\[qE"HelT5'$5/E88.!3KR?(;Yo9.1>I*7qA=SQ]>`=>DHl(K]ZgdAm3D]g9pg^,pR&-?SC54T%p[$@h661&_dl[)6'[VY#HWU"68cIbk:'7h/%H,+qrN/`;GN[opeTjY3@!<[)/Z]Y4c3eDGV:XCE-ti=g"4)dVmih[/hcJdD-8Z];%$M0d'kcji6"-#8DNgWR\VKuP@_\=AiFj:jd9q3iXn_S.,Ic,7;:-:?cU98VgU*U\bcGXd6CdBn.DZVL26^Qb6ZRXs%lJ*pW$:#-j%?C*_"e^Hr3gP,2P8'7'b'+_TE*!a)YXs5r426opXAq74L$aq25M!I`8>u&]^KNX%u[(O7[]KMiCjbC#9gfGfLYpulFL]+K#M!7CR%%CZXf\rMACi=[SPqKoqa@0%cq3h@_PN#2V=>[><[nQ6Q?2,L<X&\?FllSW_+CPt4X8@<:&+YZJic:62QHCSV[\MVlP1f["eX:!P-%3(8M\Mo+>/YUDY:NKVkhB^B8!,YDkCL.)Ie/r"\[(E(!M&IqD#pJ!7r%$71,i*n@2gW#CuW,6\-`.tpW^_SPH1$3KF]!/>'Qm:.\%<K+@d5IO0)"UqN]$rOge.L<2S35npLXD&#FV<Ob.TiD)i&f+[T=B*.`>mCZKV?bDHJ>H:$;8Cg6-41SoV'%g!`H0&#_*l?U"cQ)&%R_g@]ebWRDh@)9a;P?GbU\R75>4VsRqF9[dmSa2<r3NL'&aI(Y>-kX@ju-X;>nCDmlRZT%Ck9\DX/h3u&PX_=3M>B!][j!8`?_tR%6(:'XW&,4T&.-eNWLSOgS9nlJj$?<i=&1gEW^2ClH_V*W=].)LYL.3<Qr02/XGrH4VlCS'qh4(q0EZjIB/HKZD,1K(\AM(!G8c<N%!d-CjP]h@b1L`Bg6+Tk5(s8&!28Pe46FQ_kA!/\2V<&Jfg?Y2o1MIA_NoYfsTG_$:B?5KeFK142kCckFg6eo@<;YHIe?`Y?F2ed6%e8!2tjRb^V!3N,Qa1u?r-uq^i;$TOTa^%G`QqfW<8EF[75d6pMYV$oc)leU"<-kPQ6-]"S$EB:"CH.tF4><!\9GB#ZGkHU:QHR1%%GO,+t`l%G7$6'U#mkL_3a3D3b&j1D4m5O&cX(0.qMRP3q%689cf1*D33j)sA[2Z4TbN\SXb<?b[*<H<>Sho#$iYKhY@G;a(;hYEc%]Gs6f0o+'Dj4GG^!Rs4@'C3%gaIK;3X^MfiMrhp,:ob,8Kp4U9o.2tCWd:gR(UU&?^oB34#aPg-+92R\!ZIR%IF$aolDR@(*'Ou^%H.g/^A/0^f(e,[:He?d"G[h!!fOJZ-BP`<GM5\c+`[rgNptfb9-"AF/9V@\I6"r6S40**=Wa(5=Zn[8<Ug`-g<s@kndYf8;gH4Q*%;-ajE*E=^mX4$16aP%Z.mY[_rX!o`lWQHMOmAOtEc<d,eN]CMPGqLL"/fQO/_l+5qgi,+]99,=@OJC5i>i9:2(nFgMMM)Tr0[RM`%fZ=W.]5b%pf[UQhJ5iTiobocYd@%pDQTr\RoO0._9h[j#@bkd,VTI[=ZXSfMrN6WgK6F1;DP+GXn5:'$YRb9g)rF-?@nNkI/i%?L%i%>7!`4bEGk9aC$N7N\?X^+]mhuI-1cma^b1d!B5FB:$kj0VR@O[GodU4djdD4Jf2U+_;[2M;OI)QdBa$gT@1"hAoJnOJ%-";pMC%*Plk7XPi$h?ph>`B[.$L?>nm5-Rus`m]c'-WeonR/j^EbFbCVTDfL"ghiP!q-md1>-6.#DHe&9gSE6ne+(5c>m:t2SQobLa3;#^J%HgmikZ"rQT(=pP=_<;a5`8I2Fk"J?4MPY2rY]j;WlZ%7(/<gA,WbZ=4%dY1<)/[fnIE+4m-:PD,2qk&J]tQC+CCkX?W[7&c$,C&Y%Uq+CpNLF^sRnkDfd('^%V(lj*e[],M8'uogAUP7EL*E!5>3PSNOGal8IcI2:_61(%MO%*Y.#A^O_f0S%MO%*A.YnkAWd;`T$^_/4%7>hcS2MtO)EiR*oTM%Ajdofo#pNd.?hTt$L6=ED#K$CPWg*b!/CiY/]5mLa"3cgRO2CftlH&ctHD+-JD:ijO6'>difc>XWQYMlC?%4WV`%=;o`7*Z[g_*AW4V--/&Odb"FhL*84=!)`17UGLlJeoBmamtN39LMU#;+ud>T$jHlY1t=tkf]Ll@$-kF^:pU='1-0L1<CERu%7DfXMhubmn$jiah^."k8;fqYhH$*YU\As.2<G[*[?5InQ,M[E=G0"G+guZn<mbA8_=XTU\gkRmX:Ti;@2T.($8fTL,F94N].=,l\%6'oT'Skf7)N_U^+=INc[nAZ\K=-!1-3P).ZW6m8<Cr9-4<Wi$f!"_,@fE+muA'Ba(]#mi>^gE%#0smn57]W7#>7J2&/?ith<K*)n%3#(2-!4*"RZ!Qr.]*_S9-kHe)(a7,'eERDPX9tl/&80`D1RN(*^oG0M*k8ha=5]&$e1)KIn8iV[88#'P1GadW"g2e:aQY%+F5d\S%0`?g3;p2:C:,fHfFee-qlP,/K)i^N,!8V?cDbjl"dJNSVgZ3WqLu&-nU,.]=5TDsG#*o@4c\\ock%qbbZR@G#115"80Q]Gb$)W0A%:,7(f@5gq:Gb+\N3m$<%lGmXdl4aLj*hn%-:AnR4XJR_2W?2Q250SObAh,d^^o8F$dqNX-eUWN"R3U*No/<,9"*O-EJqha!erq.K%B+GE,TmWi6nk$P"V8cBF"qC:8jM@M7U)ergk/8L(%WtQ16UULBf?FAl=m<:7&2*7"<Xg@gW-tI$Z`u%pIIs"DNEW#!e<89?5[Sel%]7>,_r".+"`i1pIH8q32ld5q^8nS9$FL4<J%E9>VH<.q:W$8:%Qf^fS(o43L2q1kUBPI30MR1=lV;B)U`2L.sLEH.(O.FAbQHh\u%[5G1h#H\/:YLH`0'Lo39FC%tTQJno\VR=:"7aP<m'1T*(P+65<)GQtGW0;0=5&8Xso:1k"o[nP[XZ#Ij\[^r;]%?6,V9Zj/A1\[i%IKR'9LRO5.o/C2S43fi9j"+iJ)kD=slB::o-;C=B`MND(<kGgc*Nf$Q:PZ8fkB=u+Cpe1CFZ;b?B!'fA\X?')[:?\WF&i*[_[?QM%S_6\+A?4Ote[(B)YGQ5C:n%64c=WGWVaCdrX7*^pL3pj*-fUVVr^1o84"-fHkMha[:7m1-^iRA`?;?[HC*kp0U;W.scZ&TS&S:U=%q/$uFZ*Rk6K8rZ`M!=[S8E!dj4dmOHdH_7#Smid8%W9R]e$g7SRiG@Sj5jd>_'Vi6l_q>]_<\<Dbp?'[lZO.APHf&DFYi<_)".#R%EE6XY'K:c:So0U/H5@%Vl#b6HdS:(9Uc(_.0i/B;/WAD(QmZ[Dj+KQ8XcDX8SW^/)JWE9.7W`PDkq,,peZ*4^X&^bNNKtIV[e-?F%b4fS8L"g4h_K=`so!RfDa#;8p:2mXeJXS0PP0o[#I0`m[R4'Z67=9<!o$0-*6^,WD:>L&`WF@4@EY%s1;6[:n;a9qXT(!B_Ki]iV%Anjh`D(a^edq1dqV7>ePQ_]5LcKETBf2jj%2,!E=.%$cRTH^F\LLjV9M9TZ:BpRZoN3m0WRaNeG.0^rH-YYud4M=.p4X:0:?Ln>Y%?a5V$!Tq=a5LAQgg*tT20/MZF3S)UnYV]I63bc-C&oS4b+Pj9(O27+2=<a[J"\'FE7hQjP!Fc$rJos'`2r[kG)fZQAKYq&l5qpA+%"_-"==8gNemm*a6Yl-UsO(N:)mV'--/5mQ+6B^KX?%bL`i&$$jDfBBLC4lDWU=REMbet]()4%`Wk^0@Sn:[[^H?ON@Xd2#1978;r%E"hnt+#EZnP95^%;,mipV0ZhJrfo0?`IUq!jkQcj3qlcAT)70X"#Q(QR%$r!BQNdqN6iol@Rf\b\rBg470(58i3&t19[EiDO6mjq%R#(JtEGn@FS*H!pSrpHQ[LY7M^mPuITfr.e%3"Zq#4?qU`eBkM46`9a4-#H2j,?2r--O)XXr6Cn@)DQGaT0kk=UqNtP3C\+ZFYT;%?B0UX(*lY!kB`oX<*C>>JiJ6rZtY[D`!MAgO6)H]D-7UXJZIDXGghYQgDprBV^mhLl5@>GZUsnO25)M4Q&SWXSr61m>iU.aM^?c]%q4W/cio4:3K+'3523_>;V:(j47pEq&18[N"CGN)2pPQId>(_HeTfXCm]d`M1;qtji9tl^u06$[)qOU]9N0S+fEYB'(D$WRs?=IUl%6&>pDPg4e:X+p+jX@8`,9sM:Bb`K$SZ'H-7GJ)>kH505;)kSYJlI]f>eOh3<R!m\^7WAhk&W`M(>2h0_CcE'\UaM-QdVFq[*^93d%IfG$_rSIs'PWUf5,D"bkY>KFARd^i6mP="2!<eOh=>70l2g`&2/Bc2lPHb(s+U2gi3"cldXnCu<YRfa(=tt;/GSq>AYT1JX,X`.t%*3@,^,*!DP0l>(9)jlC7ZP2X9$&ZJE[DkbE*ZUcW@aK1B!5a7J$8F9pFd:+eV+h6"9uJD1WPfe,!8_G"N-<gEe%W%:RjMRTMi0SF%bTtidCM8akKP97GSR\WnT5`W&e/T3>>cRsQh.t5:1NY`bU>lI7-rX%S\"RZsi9SY.f[==C,61rL_<)Ffji`(ad.??c6hS:u#;lcQ%7n^RNQRfbYFe9GFQXSX'f75KF24Tqn-\Y7W-&s`U:[]k7:FP5JHcr\Qba$/`pu2?&PJRh3bei@dVe=,H?-85K0]DOn+@m;Q?tIp'%kF>:1U_:OK=JG?<3ZaG.OYQ`dkU1BBB'=W7f*1c'cncgOV],'a8gQ=.`nF*Nj!7[[QLpGbRLk4+ftFeUmY$(k)3!.D8J%$FLgX,7%=L5;Y6a1!+O1^3?KR)B=H$kSdRs]tPJnsC5jqEFid=qD'g./F^rioq"@c;<H!CA5qq9',`C.7hF]!d^7QkjDSM*SsTP2,+R(a05%%kd3p/NaeroROEn9Y-WhBL_Fhq&7\n<3+/-)?s5@O!)qAuVF?n8-"VA@,![<Y_,LrkZ!rqMe&R>7/kq_!="L3pJcgaA"f?]!Y?:.%%0eJ92,^e#Lnt).4$;bfLpaM')Zc+C^S9Zu%GDg0lr.&9\SOnU[CDhJ(9T+<AP!8+DH+/\SZ/7taVb01J0_E"[K8;=eAaFaM-;Yd\%9I_i8b.RJfVMo5GVkJ0+H(;?TJghPbT'R]NIMCNlp9TQ2mu+G&@p5Tki0`).d[#/9@p?s[`7.V;.?jACN%hLk,E>^A+-@BY1KG[Y%bc;U#1Vj4b",]ZeV@"[h"hDL,BlUB>`(VseGPQ2!+QBUHo&k0ee2X$U_JRd^*ll%(BoJ"S\]0J?OlD1*>(`fAju&'+)Um-M*=/9p%:GK@LR&F%qm7rm1V(mjAX@'pof/&:u9T/O5*7OaX`&+Z0'[rG8L@J)oWV@/pI=R/`)KD8sreSK8VQgI?B3rh2V?o`6O!l?_M3Y`_%%DUZ!0:j7$qreD`'(kT\S6p!Aq"ndVr-2X^^rDA$-0?E=G\_RaL:9;4(T3tFMm%)e/42^=)t(m;Zo"(-)P!]N/[l&'<bp&K2oM3B%YX%K.!fhNtCa7qL)UDt5F@"I@c-;7)3CC0V.DZRsh=h(6:`1\gV=OCdf+ldY[]\!cPZ`js'k!`<3AQ!49.*W*5[mC7&f:^m_p)O7%j#46)gUdW/Tc_?_M@>N0l?O@=kJor`J'BDFMFsd>Eo_MgqsISJ_#\a$7e#s#a$U.UL+XJSD;nQ[3+KpOS4sDQAnZFn(FI/c9,\k^%N*niEm9i$3ZoKi"Q@$CY*paW=M7^V9kX[hpb\E+s@9EVcB-_!o!HDc82AV>GjsC^cIRJ3;qV(8ZY`]^_Lj6)h8.rdgoUr$O&n;c6%S,u1"\KXHsB/F%l"&A8%.6p9eRjTn[Gf[FO!#(hXZ(sA1,LD7WlZc[DdYLi6ipG;hA"KF)TXVhh@=^n`j<TcSJO1,_1C=`Q>7cU0%Lb;r@Uau[?.(CN]<WZLp/._3eE_$J7XnCmN*8AMg7=6uQ=A6A`g1h<iQI7IIg*("JVp5,FOT\>kBrZ/"9U;End'Ba7$T%6Xl"P1^%=:u&*VjB6\RKP(bRNk@C`dF'2/0RQ(ef$i38+$U**YUlLbF0Yt]<OL#g8mG(YKPXpUc7uHmka[_RrI:NhuV,DMq?8XmL%$30R$3`%9OnsgG'tGcP)1d5!m[\i-B@AG2anT$g+b/Q=GOk^O[@>9\r<9`>qEm.]R^DofZ/XIH?.DB**JS8E\TA\A8'J8-5Zp_,kH_CDuZGk%nDdiC[ucor-5sD7.Ou#;+&/Ao(YU>h0;N-$MleqhUb&Q_^V8gWS%@5-@7_jdlceDnn_cdc>b,LEoD'))d^.(MK"8NUA=*G91/rg5%)(p(5WDc7qqhQa.$k:4(6f)4Er'XO>Ao7Pi(pf5mfur'uAD#3,iCo"'=?2^Hh4E0W+%*Np@k>3]:$mZ%llXAV\;toV)&.7d%3$W9%(8A&A$>_bV#>2bQL5$[:C1(%PToX+^[?^!-@nW;$Q7I90d#j`2-rJ"dn*d@Ef@RTM'qVYC%mutmCFVG>/VgggVg,d5[V^C&#YAl1%7$_;gKZX,$$k-47*Y3R1_[8*C$Ah8\of*6Z0?ErOI)HA(U'L`R+U@#8W&hg/'655[/p;p+>Q3;cCO9Aa9ZVe5M*ZgQ>=%U0_%@?$%+KY-o&:?"LlmEO.#rti6:+@4s,1(b7lG\5NGkEu,qf%_6gCFHDO'_S>P'-U!jN/*)(1pM[Q1i00I?>:#S`^hZkmGIt<->bnN;:!+%@1eaJ@2"'M6%DWiO%I"X]#NQ2+fXZ(al=X7j:>iJ$^8$>8K%BJN3$V:MjM(9g_q8YDTdMakr_T_%ITV31<K&Ka[?3IHmU:0N]\]3%N^Pb;)p-+c8?l66k[Mtc8nn\?KMELeH6NY!L9k21q@cF<qTI>^fPn*k_<1b/+(B$!XgG&pcBOX9jDi#t)`Q=?=lI9_Zr#><,$2,m%/iE1Z/7%<.Xr!t+V_i7l@,$f7?@dEm`*5IKp,\V-Q#Lpl[Q%tF:4Zm[J4iJs@oCle+;WUfQ_&2b8#?*Wol@]*5sAUMB>I3sq:R'#%Fh5i-9ll%$$oOWRC"CPN`h9+^1;MhRKIF5flkD%09.`(o+<*qF)cOb8;s_Y%mIQ9KXi"ibg`"5>].>jOD'B['D4h*=UbQAtrmAkJ%b\<F4.R%1"8``laMbd9j&_V>TM/>mg)=C7XGD'Q]GH'T;T0A!5`OCL1>AFiNfHm&OPWX^MZfc8Il?7c.Rk!>q)nE3h7k#_n-O;jY%1aVQhS;@Sd`-ro0,iJlsa!u+e4d?kl8j[uk0Ho?gSL=8=JU8rm"Qe^bnkLIl,TKa.#<O_0A+TMhH^\1HVb%O7:/UjB4nIQUGN@"h%^Z/U_`@GlgC3U8`1O=h-k;gepq8DTG$[g\`7<,=8P*_?0KO!\1G[`>N(SaY8Vm$5!Pd3H/iOG+^8rfn$k1+MFgc+Bt6iP0YcI!U#%Lq.Ue_qkTKL(W8]]pF:O/)Umeh_W!Q//]so*g]1`RL-1T+k<.B"H_6Iot$T)h.)-O=%J-Z@qc]d\7%^#^u(JHS3MYN!b%!Wc^SFW%SgfHL!kdB+0Q<Wpp+1BAQT1en8fRqBo?-QKVGnG'B[N[!@!h!3<5rYeCT%Y:]s4gpf]R",\l]qqd`/k#4h*#l"hS]$?5Mte*)^'G%^$7B&"[cB.X0N.6_:%+8</%gBVQ/REU,l;.m9`frhhP/Go_U7A"jXf(Gu_*:NgiDC._MXaNE*g:"oXP7"g\S2WXFi)BZ@W>k*jjh%0;7<9Z6@p29fQWsi""nH@r$2F/fDjE;!K4,h0ZiH$C=-Ma;s]L)YE<%X/@H*g'C#,4ibEYNXPFpN]Xt6hM9a($^D*>Y;cm41OK:K%Hf4I]JT8>^AZ0IJB05$ZWMNLPICoiF#Ltp;!@MgL3E\JY!aBWm/q;Y$iOiKOMRWl.Rq*?Mf.)X8#DGN`cNsGf\f6D%d-H_aI^-[!%'[eq&+(=Fen,k$mF>i:eG0UOaj9ITO1d:J_M'cj@%RFfua:O"@GEEs_>=.&6*sa52CugAa!Eie90-t:QL,cl*,r!8_?Bq5nnV5LT%JK^ZgY'"5!6ZAke'BQ"TH/$`f%u==ho.gqP+#d&P)3"m<0co1b@&MU<Ykg@UIDMIOUeK*CCb^9.!jONh7im1-DSY?KBRL$'WAI_t%a/6)4`rHWT9>D=-E"5jW`=2WIHH)T;Z6Z@BG2[*<V\c,8oZ)^u]cm=\>\@IR?\t,R6Ba6PF!;s_1qjAa*Hem]P>iJB<Q)!?G2DnS%)c'Ebp.aO93%Zk(K-BD<4)iJ2S(PPE%MCjBk(:_.JLGRKs6K;"7C6I\#7fX,$\%$(8X&q#UD`pH&"^m>n:Sa]-@Xkm"eYR@I6)Me%%ibnOa.G58)FJ-^57kP:>i<Y#FfX'IN56%KTfO.gJbXti*RnI8[F%k._^QJCnTn!+Z$!WR&GHi:\ai]#"<dqkM>bnj]N#b@O7gJ$%90(Wp[EULkIFmbtke+m4EBMt`42Y4H&F4lt6Q*p!k\ZgaK['1EHSOGsL&G8i#*`R1'I$;2#(&ADq-1u49p>9.6*063:Vh"PYB)b%%[=J]o!-C?,$XBq#kc[:U:2-2f#olS_'/7Yq3QLpR0\kb`i%Q1>^_&[`JKoQY"Q$Eb-K'-tTo2U[W=+-j"<=_o[ugt4-ZsWq#qh0J%aopEUQM6o"$+*&$'542oN!Zk"+qnYH,UQpc/L5nu;.K_:-_$L]p$e3)#rK:='53RU-I??TR,B"P/ji1u',Rn.ieEs2\;\TW/p)F0%Fl3==q_9]>L%if,3kW6*G'EUq^V2b1Y?jG@W6)F,o+/0GY<OJRTO/c-&'kdT2QN>#fcRD@5@<rWqI90VdFI[MoBP\s`HG8[oBbhk%o!!STMI4]$m'bNXgT-79f,GkNn5%mlelS+<B^4cfLX-%C5G-*jr30<&o_qOF(H:YkSn#P4C%^=6%A,RTpAn<VI(:$`G?9_$3tSU[%Te7'2G\ds@I%&M*%K./0rGWo>=-qIP<3tjUL@0+3lsD4X=8g=D3d\<f+&5epamSHRG($lQrqBqk^#%)<ZDN-olhOL0nG;#7"C+gM%KFG8Q66GZ>S*Iia2lj.=Y-+@&>hi3PpJg>'`U;9VH?=.(4kf@K5JL>Q/f;$_fBC'Co@^IpXU)'0XFbC4K=k;.2TH7[BYV)=<"B!%%EWLEHCd[JrZ/1G=VAACa<XYnc%<bb-ZXk4s<`^(ZdmD842A,62I'@>)2ArjYao0oG=21i&[j[F^R!79=J!AI%mH3o)XNNh8Dm)+!%bH(EfiPH](1iXc$rO\)Ie2'r:LQ!(M,LKkn1A[Y5HR<SRg6+idHUZ0RoAI[XjQk'!^Hd5I!p9N%1HS3W[M5E$;i@3&KqYjGe`WVa%YpT8;UBueJmpE*\'6spQ3ii'2BJ]sU4Pm9.5Mb*FG6C@C-Z<&[bn`U5D0L+Ols&@#@ff-N04/SAf2jJ!^V7::o)/S'a-e9Q_W'@k%TaI27W:&IK7sTo(^"A3c^)p!<?tB67lBfKUh>II*_'7q8ic`)jHiuOS$lOs"Za%`9Tt!&Y$@!asE>J(bJN:[G+NWMm+MU),*r0kr%A=m1-E=Wc4/4;:36GF%c&K7(t%buElN1eBQ$22,0p.6$odCAZBjAngr'V[8KPqBcqj)el2*r2^:$8hL[qBQ<-PS;^D^en\T'KUB\%C"rrSrd)0VQ="7_;8:G"N`QG@gK"$MO7J\\k;LOJ1VNY@Ido%C$h"5d/)<.H@%[HuJFYRkm5:nL1r#"&&PSf!AML.__3^)Y:K9kl%p)Y^rOF=gsYAOh:e7o_<Q:WXAgt_GXGIu*g!7jXAF\\u)]McqBRf[GhJdcrS$_a3\(K[dbZ13N=i@?A$GH4gmTD1:UeaUDIf/k\k%!_@\NW+V0T*>-PMO)^$%`F?n?UE_RK!2&7toe4jMrS;pHHi;4>jY!"=_#o(BQ'sY^j8JAiS*G]pfq2=l5kq-Wn54#8%/RYK#jgCB%7mru&qhaP-p$;S9qTX>3$N5hMWLUTk^:-@)U0u'AZH>tBQkMJDe0Mm[R+XD)[D%Y\cc%c%0^fU0+CALDQFGW!e`"]j@57ZGj]QsI%,9(R3H[rX3`)3Oi+rDf7l<iooqho4"g[+X^5P?Tg?MAttXW?n;Ycju[rg?^.33;==ct4Q]K9-rO++tX@0R&-5pEobi(B2k/ojY\I%>/$3[eecl]qJQC1nlPp;]sngq\63`g2tRCjU`H!i!'S"Y>i-U&mhRi+0^HIcYki6[ZeO8qH&O9Er+RHTp&5pk_-_+'NE7;Je\Brn%2XA8ml5W0\6N.?H06d;OeHOh<i=JLrG:5Wk28%XC]=4j>2'fD0?O=c]f=ROF@?jYbZ]BQ;.A<A*b4F0Bp,Z,ekDOPbIIau/d#-:?%EHW*f;2<Zm="k<l[PFIVk?+lM'7DWunIYh$1Z3u:5eu<6IND(-.Ds0#=ZKXV@8@bR!q]SbBFurWC.']7LrPgjR6?m?4M%D:MmGr*%Y4+=MUhtBNg6dUDaHd(ci)ES/M8DXWE1SkO5TJnogC@j$@mpBqo@\(@Em0pa,'q?BP&/B+OpLai(bBQRa!%IfKUB!6,mk8Y,Vl&R%Y0(eYC=_;WJ"piM$q*`;*=nX[V$k(u70GR-,'#5L@NAm)(J@*`\$d05@5ZhrB1rVC8[auh.XQ!`9o)W.J]DbG@Hi2#9*D)u897*R%XVRr%Gai'XL<#aXS$sCSkV*0u'o]T(/.Ua*h^:3Rb0.]uChOLmD`I_=k2T;ER(pWFAW'psmSj\;@P/YLL:&Ug$R1/X1!2'_MH>n'%1@iCn=ut)Y5.aDWfOAiXQTnk<[RHQiQ6`?$_4mk!N!40V2<-Q4Fas`(:M(((E6+6gB+6S)I5<-+bnP/`dR?PQW?2_kU]EQ&S8^B[%*]2bVr"'I"7#%N/=fOt_)/C-&O"#LYfb'"b1FYg5NY:4,<[Jm\'EtM9CXi\VkgFf)i?M#1hLoN8O`E5ADK#_;_O!b<lmD+%:jgTb%4/F6L,FZ8+OR1K)[=7.O,V5pM7"!E+=V[-p8SM$<,t'25-)\4CfSC^!5*e"UE24gH-&NqEU.V@o/]QHpN\(]XB=GNN"$9\Zpg6:#%^N_henI3201`cBj3?@qK9-&q>pt+3PbMTK]Dc__eE`$8AaArg7(GoK(!lYTrII['Nhsc(#0jHI+LKb7=mLLt#[s<2rk5"DFS&6&m%pal-qWY11r4OQQG3!Yb!a$5%h.7MC[faj-8W2j5e8]<P8o&"%''eb"PWpsPXC^X94R_NU<(N5E+=-7(iGtkLZ)^N7lHLWegPf,WZ%]R')UC]EClfn9;L(=J*_ip2N#Z_;^7H1f(iSK:4LoG,D@KS*auGcOWr&G-m$YNJe6F;D%*iV<j)iI'cLKu4j*X:"dmbVRM:Uj4j7%*dXU&@P4_t66l412fcPd(ibD3:qVCMP`[U]=Xhc,Xa/X5pciWIjgG>/q!YsZ02.9teiL`6gQN9DoI_RkPN0Kcc!i,Fe)F=_PRW_t%2MPl$F(e=jFXFL,T>'$\s*D;Oo\s9VTrB+(9_T;Xr8:^amR'L,Ft+mNDNAN.jeQR#P^-SIM7oWi7eHO6:L;gE@=3"h-[>3unhDis%Ad#dF"9Qq,S]BE7*J/We<V\SG:qf4,9@)quq@dF)pb#'W;G\:F_.RG^LH(f$"@iUVTcqqsDEamo)B<"u.%\$W]>)Q>P90Yt^S)hU%JPa+(7@sGN'mYl*JF-il@.S;=KjQ?0-T]t.WaKfg$MHdb,Djl><WO8nDdA'(.nCa`KbgRd)r@c$s.]kJmDfPH:A![7iP/Y5I\e08%C_c6t\$*ZP'VpekK$fB@30V6EN$*Q60ZQre>?9h:MUSI5F2)uhI]ZFpE1"8&5IF81]q,ZRcgPh_+,OWkKEUW)95eELcN[W@NrX7X%*nXuNB>DXd\CMM+"<p<8&q%q,hE?Td(3/5`_2\3%j:O\5K9NkjE&&bWOOQ1uEBo[8gOl-M4`:XbR,JhT=m8S@BGu-,\GOY2i7`'d%EF6/.%ukp=;$l+3MushV`oTf*@R1Y1ZFV[+0s0PXFufF`\0<9FL,(s;-Us[9E;LbNT?gu^f`/2L%b?*$V"M'\8,Q%PM5-]Vr)Pji%#cp/RV)Uu[o3>c(#f$!1*EP>Z^YZ0O]q.*qA^n8mZ*/f7*F%;oJrKje$2s;!a8HS$-T>m,A8_/%a,cP0g[03s6aku@n%7ZrLcD<1%k4O]t'\;jaTGmDg4?Jj!WrT0_*SE#^F2bR2,Ras`?-]`4ge_#2$pCBq]I(,M%DB7b0HnJZY*bn(8J$`#SDnF+plE<mTeun)EN]f1%kdc[A=O?""pQgBtF^ti'r"MuQnBUl`$&;Fh[Q:S^-hl^![FFg*UnseXpn&>6=,Z/Ii^>S2cc/gL5th+k9m*A2_41]?Fg/B"iNtc;%*fUhgn:1C9$_UAsjF3E=<#mhUF0$)HPk:HGUB]=R:4sR#V/SBGNfa]n_oj5siGPkmBHl5kXXCuFPZ#"1CQ=&eBr,d$"f6/g;bH"<%=t/5t.>9i`q,aVlpUAY%OuiH3(Ah3VPVppgNj=E902Y4DGIod4:7q8>0n=]t`HBLPo^ag2N6r)j!;c'8iq;TUI^.b2p9W@0Mmoa%%EHMFkXfganiaZj9]D\b@H*dAc.?Z!/F4'"/2k/&D_q921Q\)n3408/1op$Yu?EXjhlBg$V5i0.V>Y(%a<<"#<-O?LCAh-:VTRRL1%[DnbcT[:TglQ%4[hL,BCM&O+kqZ\c/c(.Bhqs:A]?dJ_$M=Cp3~>%AI9_PrivateDataEnd